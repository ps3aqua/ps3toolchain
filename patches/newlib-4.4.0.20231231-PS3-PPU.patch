diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/Makefile.am newlib-ps3/libgloss/Makefile.am
--- newlib-4.4.0.20231231/libgloss/Makefile.am	2023-12-31 18:00:18
+++ newlib-ps3/libgloss/Makefile.am	2024-04-14 17:38:56
@@ -84,6 +84,9 @@ endif
 if CONFIG_IQ2000
 include iq2000/Makefile.inc
 endif
+if CONFIG_LIBSYSBASE
+include libsysbase/Makefile.inc
+endif
 if CONFIG_LIBNOSYS
 include libnosys/Makefile.inc
 endif
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/Makefile.in newlib-ps3/libgloss/Makefile.in
--- newlib-4.4.0.20231231/libgloss/Makefile.in	2023-12-31 18:00:18
+++ newlib-ps3/libgloss/Makefile.in	2024-04-15 05:00:16
@@ -171,6 +171,7 @@ check_PROGRAMS = $(am__EXEEXT_2) $(am__EXEEXT_3)
 @CONFIG_IQ2000_TRUE@am__append_24 = iq2000/libeval.a
 @CONFIG_IQ2000_TRUE@am__append_25 = iq2000/crt0.S iq2000/test.o
 @CONFIG_IQ2000_TRUE@am__append_26 = iq2000/test
+@CONFIG_LIBSYSBASE_TRUE@am__append_282 = libsysbase/libsysbase.a
 @CONFIG_LIBNOSYS_TRUE@am__append_27 = libnosys/nosys.specs
 @CONFIG_LIBNOSYS_TRUE@am__append_28 = libnosys/libnosys.a
 @CONFIG_LM32_TRUE@am__append_29 = lm32/crt0.o lm32/sim.ld
@@ -459,6 +460,61 @@ libobjs_a_OBJECTS = $(am_libobjs_a_OBJECTS)
 am_libobjs_a_OBJECTS = $(am__objects_3) $(am__objects_4) \
 	$(am__objects_5) $(am__objects_6) $(am__objects_7)
 libobjs_a_OBJECTS = $(am_libobjs_a_OBJECTS)
+libsysbase_libsysbase_a_AR = $(AR) $(ARFLAGS)
+libsysbase_libsysbase_a_LIBADD =
+@CONFIG_LIBSYSBASE_TRUE@am_libsysbase_libsysbase_a_OBJECTS =  \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/_exit.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/abort.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/access.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/chdir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/chmod.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/close.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/closedir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/dup.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/environ.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/execve.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/fork.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/fstat.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/fstat64.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/fsync.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/ftruncate.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/getpid.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/getrusage.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/gettod.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/glob.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/globfree.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/isatty.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/kill.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/link.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/lock.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/lseek.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/lseek64.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/mkdir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/open.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/opendir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/read.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/readdir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/readdir_r.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/rename.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/rewinddir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/rmdir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/sbrk.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/seekdir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/settod.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/sleep.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/stat.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/stat64.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/syscalls.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/telldir.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/times.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/truncate.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/umask.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/unlink.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/utime.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/wait.$(OBJEXT) \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/write.$(OBJEXT)
+libsysbase_libsysbase_a_OBJECTS =  \
+	$(am_libsysbase_libsysbase_a_OBJECTS)
 lm32_libgloss_a_AR = $(AR) $(ARFLAGS)
 lm32_libgloss_a_LIBADD =
 @CONFIG_LM32_TRUE@am_lm32_libgloss_a_OBJECTS = lm32/isatty.$(OBJEXT) \
@@ -667,7 +723,7 @@ SOURCES = $(aarch64_librdimon_a_SOURCES) $(arc_libnsim
 	$(arm_librdimon_a_SOURCES) $(arm_librdpmon_a_SOURCES) \
 	$(bfin_libbfinbsp_a_SOURCES) $(bfin_libsim_a_SOURCES) \
 	$(csky_libsemi_a_SOURCES) $(d30v_libsim_a_SOURCES) \
-	$(iq2000_libeval_a_SOURCES) $(libnosys_libnosys_a_SOURCES) \
+	$(iq2000_libeval_a_SOURCES) $(libnosys_libnosys_a_SOURCES) $(libsysbase_libsysbase_a_SOURCES) \
 	$(libobjs_a_SOURCES) $(lm32_libgloss_a_SOURCES) \
 	$(nios2_libnios2_a_SOURCES) $(riscv_libgloss_a_SOURCES) \
 	$(riscv_libsemihost_a_SOURCES) $(riscv_libsim_a_SOURCES) \
@@ -904,7 +960,7 @@ multilibtool_LIBRARIES = $(am__append_2) $(am__append_
 	$(am__append_44) $(am__append_48)
 multilibtool_LIBRARIES = $(am__append_2) $(am__append_5) \
 	$(am__append_9) $(am__append_11) $(am__append_20) \
-	$(am__append_21) $(am__append_24) $(am__append_28) \
+	$(am__append_21) $(am__append_24) $(am__append_28) $(am__append_282) \
 	$(am__append_30) $(am__append_33) $(am__append_35) \
 	$(am__append_41) $(am__append_43)
 includetooldir = $(tooldir)/include
@@ -1071,6 +1127,58 @@ TEXINFO_TEX = ../texinfo/texinfo.tex
 @CONFIG_IQ2000_TRUE@	iq2000/kill.c iq2000/lseek.c iq2000/open.c iq2000/read.c \
 @CONFIG_IQ2000_TRUE@	iq2000/sbrk.c iq2000/stat.c iq2000/time.c iq2000/trap.c iq2000/unlink.c iq2000/utime.c iq2000/write.c
 
+@CONFIG_LIBSYSBASE_TRUE@libsysbase_libsysbase_a_SOURCES = \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/_exit.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/abort.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/access.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/chdir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/chmod.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/close.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/closedir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/dup.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/environ.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/execve.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/fork.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/fstat.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/fstat64.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/fsync.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/ftruncate.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/getpid.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/getrusage.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/gettod.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/glob.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/globfree.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/isatty.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/kill.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/link.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/lock.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/lseek.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/lseek64.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/mkdir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/open.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/opendir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/read.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/readdir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/readdir_r.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/rename.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/rewinddir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/rmdir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/sbrk.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/seekdir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/settod.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/sleep.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/stat.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/stat64.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/syscalls.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/telldir.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/times.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/truncate.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/umask.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/unlink.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/utime.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/wait.c \
+@CONFIG_LIBSYSBASE_TRUE@	libsysbase/write.c
+
 @CONFIG_LIBNOSYS_TRUE@libnosys_libnosys_a_SOURCES = \
 @CONFIG_LIBNOSYS_TRUE@	libnosys/chown.c \
 @CONFIG_LIBNOSYS_TRUE@	libnosys/close.c \
@@ -1228,7 +1336,7 @@ am--refresh: Makefile
 .SUFFIXES: .S .c .dvi .o .obj .ps
 am--refresh: Makefile
 	@:
-$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/../multilib.am $(srcdir)/doc/Makefile.inc $(srcdir)/aarch64/Makefile.inc $(srcdir)/aarch64/cpu-init/Makefile.inc $(srcdir)/arc/Makefile.inc $(srcdir)/arm/Makefile.inc $(srcdir)/arm/cpu-init/Makefile.inc $(srcdir)/bfin/Makefile.inc $(srcdir)/csky/Makefile.inc $(srcdir)/d30v/Makefile.inc $(srcdir)/iq2000/Makefile.inc $(srcdir)/libnosys/Makefile.inc $(srcdir)/lm32/Makefile.inc $(srcdir)/nios2/Makefile.inc $(srcdir)/riscv/Makefile.inc $(srcdir)/wince/Makefile.inc $(srcdir)/xtensa/Makefile.inc $(am__configure_deps)
+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/../multilib.am $(srcdir)/doc/Makefile.inc $(srcdir)/aarch64/Makefile.inc $(srcdir)/aarch64/cpu-init/Makefile.inc $(srcdir)/arc/Makefile.inc $(srcdir)/arm/Makefile.inc $(srcdir)/arm/cpu-init/Makefile.inc $(srcdir)/bfin/Makefile.inc $(srcdir)/csky/Makefile.inc $(srcdir)/d30v/Makefile.inc $(srcdir)/iq2000/Makefile.inc $(srcdir)/libsysbase/Makefile.inc $(srcdir)/libnosys/Makefile.inc $(srcdir)/lm32/Makefile.inc $(srcdir)/nios2/Makefile.inc $(srcdir)/riscv/Makefile.inc $(srcdir)/wince/Makefile.inc $(srcdir)/xtensa/Makefile.inc $(am__configure_deps)
 	@for dep in $?; do \
 	  case '$(am__configure_deps)' in \
 	    *$$dep*) \
@@ -1250,7 +1358,7 @@ Makefile: $(srcdir)/Makefile.in $(top_builddir)/config
 	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
 	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
 	esac;
-$(top_srcdir)/../multilib.am $(srcdir)/doc/Makefile.inc $(srcdir)/aarch64/Makefile.inc $(srcdir)/aarch64/cpu-init/Makefile.inc $(srcdir)/arc/Makefile.inc $(srcdir)/arm/Makefile.inc $(srcdir)/arm/cpu-init/Makefile.inc $(srcdir)/bfin/Makefile.inc $(srcdir)/csky/Makefile.inc $(srcdir)/d30v/Makefile.inc $(srcdir)/iq2000/Makefile.inc $(srcdir)/libnosys/Makefile.inc $(srcdir)/lm32/Makefile.inc $(srcdir)/nios2/Makefile.inc $(srcdir)/riscv/Makefile.inc $(srcdir)/wince/Makefile.inc $(srcdir)/xtensa/Makefile.inc $(am__empty):
+$(top_srcdir)/../multilib.am $(srcdir)/doc/Makefile.inc $(srcdir)/aarch64/Makefile.inc $(srcdir)/aarch64/cpu-init/Makefile.inc $(srcdir)/arc/Makefile.inc $(srcdir)/arm/Makefile.inc $(srcdir)/arm/cpu-init/Makefile.inc $(srcdir)/bfin/Makefile.inc $(srcdir)/csky/Makefile.inc $(srcdir)/d30v/Makefile.inc $(srcdir)/iq2000/Makefile.inc $(srcdir)/libsysbase/Makefile.inc $(srcdir)/libnosys/Makefile.inc $(srcdir)/lm32/Makefile.inc $(srcdir)/nios2/Makefile.inc $(srcdir)/riscv/Makefile.inc $(srcdir)/wince/Makefile.inc $(srcdir)/xtensa/Makefile.inc $(am__empty):
 
 $(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
 	$(SHELL) ./config.status --recheck
@@ -1734,7 +1842,117 @@ lm32/scall.$(OBJEXT): lm32/$(am__dirstamp) \
 	lm32/$(DEPDIR)/$(am__dirstamp)
 lm32/scall.$(OBJEXT): lm32/$(am__dirstamp) \
 	lm32/$(DEPDIR)/$(am__dirstamp)
+libsysbase/$(am__dirstamp):
+	@$(MKDIR_P) libsysbase
+	@: > libsysbase/$(am__dirstamp)
+libsysbase/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) libsysbase/$(DEPDIR)
+	@: > libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/_exit.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/abort.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/access.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/chdir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/chmod.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/close.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/closedir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/dup.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/environ.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/execve.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/fork.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/fstat.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/fstat64.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/fsync.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/ftruncate.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/getpid.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/getrusage.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/gettod.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/glob.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/globfree.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/isatty.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/kill.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/link.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/lock.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/lseek.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/lseek64.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/mkdir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/open.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/opendir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/read.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/readdir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/readdir_r.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/rename.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/rewinddir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/rmdir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/sbrk.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/seekdir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/settod.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/sleep.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/stat.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/stat64.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/syscalls.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/telldir.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/times.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/truncate.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/umask.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/unlink.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/utime.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/wait.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
+libsysbase/write.$(OBJEXT): libsysbase/$(am__dirstamp) \
+	libsysbase/$(DEPDIR)/$(am__dirstamp)
 
+libsysbase/libsysbase.a: $(libsysbase_libsysbase_a_OBJECTS) $(libsysbase_libsysbase_a_DEPENDENCIES) $(EXTRA_libsysbase_libsysbase_a_DEPENDENCIES) libsysbase/$(am__dirstamp)
+	$(AM_V_at)-rm -f libsysbase/libsysbase.a
+	$(AM_V_AR)$(libsysbase_libsysbase_a_AR) libsysbase/libsysbase.a $(libsysbase_libsysbase_a_OBJECTS) $(libsysbase_libsysbase_a_LIBADD)
+	$(AM_V_at)$(RANLIB) libsysbase/libsysbase.a
 lm32/libgloss.a: $(lm32_libgloss_a_OBJECTS) $(lm32_libgloss_a_DEPENDENCIES) $(EXTRA_lm32_libgloss_a_DEPENDENCIES) lm32/$(am__dirstamp)
 	$(AM_V_at)-rm -f lm32/libgloss.a
 	$(AM_V_AR)$(lm32_libgloss_a_AR) lm32/libgloss.a $(lm32_libgloss_a_OBJECTS) $(lm32_libgloss_a_LIBADD)
@@ -2113,6 +2331,7 @@ mostlyclean-compile:
 	-rm -f d30v/*.$(OBJEXT)
 	-rm -f iq2000/*.$(OBJEXT)
 	-rm -f libnosys/*.$(OBJEXT)
+	-rm -f libsysbase/*.$(OBJEXT)
 	-rm -f lm32/*.$(OBJEXT)
 	-rm -f nios2/*.$(OBJEXT)
 	-rm -f riscv/*.$(OBJEXT)
@@ -2238,6 +2457,56 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@libnosys/$(DEPDIR)/unlink.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@libnosys/$(DEPDIR)/wait.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@libnosys/$(DEPDIR)/write.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/_exit.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/abort.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/access.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/chdir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/chmod.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/close.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/closedir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/dup.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/environ.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/execve.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/fork.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/fstat.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/fstat64.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/fsync.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/ftruncate.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/getpid.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/getrusage.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/gettod.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/glob.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/globfree.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/isatty.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/kill.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/link.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/lock.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/lseek.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/lseek64.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/mkdir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/open.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/opendir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/read.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/readdir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/readdir_r.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/rename.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/rewinddir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/rmdir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/sbrk.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/seekdir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/settod.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/sleep.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/stat.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/stat64.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/syscalls.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/telldir.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/times.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/truncate.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/umask.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/unlink.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/utime.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/wait.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@libsysbase/$(DEPDIR)/write.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@lm32/$(DEPDIR)/crt0.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@lm32/$(DEPDIR)/isatty.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@lm32/$(DEPDIR)/scall.Po@am__quote@
@@ -5103,6 +5372,8 @@ distclean-generic:
 	-rm -f iq2000/$(am__dirstamp)
 	-rm -f libnosys/$(DEPDIR)/$(am__dirstamp)
 	-rm -f libnosys/$(am__dirstamp)
+	-rm -f libsysbase/$(DEPDIR)/$(am__dirstamp)
+	-rm -f libsysbase/$(am__dirstamp)
 	-rm -f lm32/$(DEPDIR)/$(am__dirstamp)
 	-rm -f lm32/$(am__dirstamp)
 	-rm -f nios2/$(DEPDIR)/$(am__dirstamp)
@@ -5129,7 +5400,7 @@ distclean: distclean-recursive
 
 distclean: distclean-recursive
 	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
-	-rm -rf ./$(DEPDIR) aarch64/$(DEPDIR) arc/$(DEPDIR) arm/$(DEPDIR) bfin/$(DEPDIR) csky/$(DEPDIR) d30v/$(DEPDIR) iq2000/$(DEPDIR) libnosys/$(DEPDIR) lm32/$(DEPDIR) nios2/$(DEPDIR) riscv/$(DEPDIR) xtensa/$(DEPDIR) xtensa/boards/esp32/$(DEPDIR) xtensa/boards/esp32s3/$(DEPDIR)
+	-rm -rf ./$(DEPDIR) aarch64/$(DEPDIR) arc/$(DEPDIR) arm/$(DEPDIR) bfin/$(DEPDIR) csky/$(DEPDIR) d30v/$(DEPDIR) iq2000/$(DEPDIR) libsysbase/$(DEPDIR) libnosys/$(DEPDIR) lm32/$(DEPDIR) nios2/$(DEPDIR) riscv/$(DEPDIR) xtensa/$(DEPDIR) xtensa/boards/esp32/$(DEPDIR) xtensa/boards/esp32s3/$(DEPDIR)
 	-rm -f Makefile
 distclean-am: clean-am distclean-compile distclean-generic \
 	distclean-hdr distclean-local distclean-tags
@@ -5272,7 +5543,7 @@ maintainer-clean: maintainer-clean-recursive
 maintainer-clean: maintainer-clean-recursive
 	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
 	-rm -rf $(top_srcdir)/autom4te.cache
-	-rm -rf ./$(DEPDIR) aarch64/$(DEPDIR) arc/$(DEPDIR) arm/$(DEPDIR) bfin/$(DEPDIR) csky/$(DEPDIR) d30v/$(DEPDIR) iq2000/$(DEPDIR) libnosys/$(DEPDIR) lm32/$(DEPDIR) nios2/$(DEPDIR) riscv/$(DEPDIR) xtensa/$(DEPDIR) xtensa/boards/esp32/$(DEPDIR) xtensa/boards/esp32s3/$(DEPDIR)
+	-rm -rf ./$(DEPDIR) aarch64/$(DEPDIR) arc/$(DEPDIR) arm/$(DEPDIR) bfin/$(DEPDIR) csky/$(DEPDIR) d30v/$(DEPDIR) iq2000/$(DEPDIR) libsysbase/$(DEPDIR) libnosys/$(DEPDIR) lm32/$(DEPDIR) nios2/$(DEPDIR) riscv/$(DEPDIR) xtensa/$(DEPDIR) xtensa/boards/esp32/$(DEPDIR) xtensa/boards/esp32s3/$(DEPDIR)
 	-rm -f Makefile
 maintainer-clean-am: distclean-am maintainer-clean-aminfo \
 	maintainer-clean-generic maintainer-clean-local
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/config.h.in newlib-ps3/libgloss/config.h.in
--- newlib-4.4.0.20231231/libgloss/config.h.in	2023-12-31 18:00:18
+++ newlib-ps3/libgloss/config.h.in	2024-04-15 22:37:27
@@ -18,6 +18,9 @@
 /* Missing syscall names */
 #undef MISSING_SYSCALL_NAMES
 
+/* Reentrant syscalls */
+#undef REENTRANT_SYSCALLS_PROVIDED
+
 /* Define to the address where bug reports for this package should be sent. */
 #undef PACKAGE_BUGREPORT
 
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/configure newlib-ps3/libgloss/configure
--- newlib-4.4.0.20231231/libgloss/configure	2023-12-31 18:00:18
+++ newlib-ps3/libgloss/configure	2024-04-15 22:49:51
@@ -649,6 +649,8 @@ CONFIG_LM32_TRUE
 CONFIG_NIOS2_TRUE
 CONFIG_LM32_FALSE
 CONFIG_LM32_TRUE
+CONFIG_LIBSYSBASE_FALSE
+CONFIG_LIBSYSBASE_TRUE
 CONFIG_LIBNOSYS_FALSE
 CONFIG_LIBNOSYS_TRUE
 CONFIG_IQ2000_FALSE
@@ -2756,6 +2758,8 @@ config_libnosys=true
 
 config_libnosys=true
 
+config_libsysbase=true
+
 host_makefile_frag=${srcdir}/config/default.mh
 target_makefile_frag=${srcdir}/config/default.mt
 
@@ -2971,6 +2975,7 @@ case "${target}" in
 	host_makefile_frag=${srcdir}/config/ppc.mh
 	config_testsuite=false
 	config_libnosys=false
+	config_libsysbase=false
 	;;
   tic6x-*-*)
 	ac_config_files="$ac_config_files tic6x/Makefile"
@@ -3061,6 +3066,14 @@ fi
   CONFIG_LIBNOSYS_FALSE=
 fi
 
+   if test x$config_libsysbase = xtrue; then
+  CONFIG_LIBSYSBASE_TRUE=
+  CONFIG_LIBSYSBASE_FALSE='#'
+else
+  CONFIG_LIBSYSBASE_TRUE='#'
+  CONFIG_LIBSYSBASE_FALSE=
+fi
+
    if test x$config_lm32 = xtrue; then
   CONFIG_LM32_TRUE=
   CONFIG_LM32_FALSE='#'
@@ -4976,6 +4989,13 @@ esac
  ;;
 esac
 
+case "${target}" in
+  powerpc64-ps3-elf)
+$as_echo "#define REENTRANT_SYSCALLS_PROVIDED 1" >>confdefs.h
+ ;;
+  *) ;;
+esac
+
 M68K_TARGET=m68k
 case "${target}" in
   fido-*-* | m68*-*-*)
@@ -5396,6 +5416,10 @@ if test -z "${CONFIG_LIBNOSYS_TRUE}" && test -z "${CON
 fi
 if test -z "${CONFIG_LIBNOSYS_TRUE}" && test -z "${CONFIG_LIBNOSYS_FALSE}"; then
   as_fn_error $? "conditional \"CONFIG_LIBNOSYS\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${CONFIG_LIBSYSBASE_TRUE}" && test -z "${CONFIG_LIBSYSBASE_FALSE}"; then
+  as_fn_error $? "conditional \"CONFIG_LIBSYSBASE\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
 if test -z "${CONFIG_LM32_TRUE}" && test -z "${CONFIG_LM32_FALSE}"; then
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/configure.ac newlib-ps3/libgloss/configure.ac
--- newlib-4.4.0.20231231/libgloss/configure.ac	2023-12-31 18:00:18
+++ newlib-ps3/libgloss/configure.ac	2024-04-15 20:52:57
@@ -43,6 +43,9 @@ config_libnosys=true
 dnl indicates whether to run configure within the libnosys subdirectory
 config_libnosys=true
 
+dnl indicates whether to run configure within the libsysbase subdirectory
+config_libsysbase=true
+
 host_makefile_frag=${srcdir}/config/default.mh
 target_makefile_frag=${srcdir}/config/default.mt
 
@@ -224,6 +227,7 @@ case "${target}" in
 	host_makefile_frag=${srcdir}/config/ppc.mh
 	config_testsuite=false
 	config_libnosys=false
+	config_libsysbase=false
 	;;
   tic6x-*-*)
 	AC_CONFIG_FILES([tic6x/Makefile])
@@ -250,7 +254,7 @@ m4_foreach_w([SUBDIR], [
 dnl These subdirs have converted to non-recursive make.  Hopefully someday all
 dnl the ports above will too!
 m4_foreach_w([SUBDIR], [
-  aarch64 arc arm bfin csky d30v iq2000 libnosys lm32 nios2 riscv wince xtensa
+  aarch64 arc arm bfin csky d30v iq2000 libnosys libsysbase lm32 nios2 riscv wince xtensa
 ], [dnl
   AM_CONDITIONAL([CONFIG_]m4_toupper(SUBDIR), [test x$config_]SUBDIR = xtrue)
 ])
@@ -346,6 +350,7 @@ m4_include([libnosys/acinclude.m4])
 m4_include([arm/acinclude.m4])
 m4_include([i386/acinclude.m4])
 m4_include([libnosys/acinclude.m4])
+m4_include([libsysbase/acinclude.m4])
 m4_include([m68k/acinclude.m4])
 m4_include([mcore/acinclude.m4])
 m4_include([mips/acinclude.m4])
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/Makefile.inc newlib-ps3/libgloss/libsysbase/Makefile.inc
--- newlib-4.4.0.20231231/libgloss/libsysbase/Makefile.inc	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/Makefile.inc	2024-04-15 22:51:10
@@ -0,0 +1,52 @@
+multilibtool_LIBRARIES += %D%/libsysbase.a
+%C%_libsysbase_a_SOURCES = \
+	%D%/_exit.c \
+	%D%/abort.c \
+	%D%/access.c \
+	%D%/chdir.c \
+	%D%/chmod.c \
+	%D%/close.c \
+	%D%/closedir.c \
+	%D%/dup.c \
+	%D%/environ.c \
+	%D%/execve.c \
+	%D%/fork.c \
+	%D%/fstat.c \
+	%D%/fstat64.c \
+	%D%/fsync.c \
+	%D%/ftruncate.c \
+	%D%/getpid.c \
+	%D%/getrusage.c \
+	%D%/gettod.c \
+	%D%/glob.c \
+	%D%/globfree.c \
+	%D%/isatty.c \
+	%D%/kill.c \
+	%D%/link.c \
+	%D%/lock.c \
+	%D%/lseek.c \
+	%D%/lseek64.c \
+	%D%/mkdir.c \
+	%D%/open.c \
+	%D%/opendir.c \
+	%D%/read.c \
+	%D%/readdir.c \
+	%D%/readdir_r.c \
+	%D%/rename.c \
+	%D%/rewinddir.c \
+	%D%/rmdir.c \
+	%D%/sbrk.c \
+	%D%/seekdir.c \
+	%D%/settod.c \
+	%D%/sleep.c \
+	%D%/stat.c \
+	%D%/stat64.c \
+	%D%/syscalls.c \
+	%D%/telldir.c \
+	%D%/times.c \
+	%D%/truncate.c \
+	%D%/umask.c \
+	%D%/unlink.c \
+	%D%/utime.c \
+	%D%/wait.c \
+	%D%/write.c
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/_exit.c newlib-ps3/libgloss/libsysbase/_exit.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/_exit.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/_exit.c	2024-04-15 22:51:10
@@ -0,0 +1,13 @@
+#include <limits.h>
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <sys/syscalls.h>
+
+void _exit(int rc)
+{
+	if(__syscalls.exit)
+		__syscalls.exit(rc);
+
+	while(1);
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/abort.c newlib-ps3/libgloss/libsysbase/abort.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/abort.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/abort.c	2024-04-15 22:51:10
@@ -0,0 +1,8 @@
+#include <stdlib.h>
+#include <unistd.h>
+
+void abort(void)
+{
+	write(2, "Abort called.\n", sizeof("Abort called.\n") - 1);
+	_exit(1);
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/access.c newlib-ps3/libgloss/libsysbase/access.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/access.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/access.c	2024-04-15 22:51:10
@@ -0,0 +1,82 @@
+/* This is file ACCESS.C */
+/*
+ * Copyright (C) 1993 DJ Delorie
+ * All rights reserved.
+ *
+ * Redistribution, modification, and use in source and binary forms is permitted
+ * provided that the above copyright notice and following paragraph are
+ * duplicated in all such forms.
+ *
+ * This file is distributed WITHOUT ANY WARRANTY; without even the implied
+ * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
+extern int errno;
+
+int access(const char *fn, int flags)
+{
+	struct stat s;
+
+	/* Did the pass us the right flags? */
+	if ( (flags != F_OK) && (flags != R_OK) && (flags != W_OK) && (flags != X_OK) ) {
+		/* Nope. */
+		errno = EINVAL;
+		return -1;
+	}
+
+	if (stat(fn, &s)) {
+		/* return -1 because the file does not exist or pathname is too long. */
+		return -1;
+	}
+
+	if (flags == F_OK) {
+		/* We know the file exists because stat didn't fail. */
+		return 0;
+	}
+
+	if (flags & W_OK) {
+		/* Do we have write permission to the file? */
+		if (s.st_mode & S_IWRITE) {
+			/* We do. */
+			return 0;
+		}
+
+		/* Nope. */
+		errno = EACCES;
+		return -1;
+	}
+
+	if (flags & R_OK) {
+		/* Do we have read permission to the file? */
+		if (s.st_mode & S_IREAD) {
+			/* We do. */
+			return 0;
+		}
+
+		/* Nope. */
+		errno = EACCES;
+		return -1;
+	}
+
+	if (flags & X_OK) {
+		/* Do we have executable permission to the file? */
+		if (s.st_mode & S_IEXEC) {
+			/* We do. */
+			return 0;
+		}
+
+		/* Nope. */
+		errno = EACCES;
+		return -1;
+	}
+
+	/* We should never reach this, ever...in case we do though, lets return -1. */
+	/* and set errno to ENOSYS (Function not implemented */
+	errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/acinclude.m4 newlib-ps3/libgloss/libsysbase/acinclude.m4
--- newlib-4.4.0.20231231/libgloss/libsysbase/acinclude.m4	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/acinclude.m4	2024-04-15 22:51:10
@@ -0,0 +1,4 @@
+case "${target}" in
+  powerpc64-ps3-elf) AC_DEFINE(REENTRANT_SYSCALLS_PROVIDED, 1, [Reentrant syscalls]) ;;
+  *) ;;
+esac
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/chdir.c newlib-ps3/libgloss/libsysbase/chdir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/chdir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/chdir.c	2024-04-15 22:51:10
@@ -0,0 +1,32 @@
+#include <unistd.h>
+#include <reent.h>
+#include <string.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+int _concatenate_path(struct _reent *r,char *path,const char *extra,int maxLength)
+{
+	return -1;
+}
+
+int chdir(const char *path)
+{
+	struct _reent *r = _REENT;
+	
+	if(__syscalls.chdir_r)
+		return __syscalls.chdir_r(r,path);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
+
+char* getcwd(char *buf,size_t size)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.getcwd_r)
+		return __syscalls.getcwd_r(r,buf,size);
+
+	r->_errno = ENOSYS;
+	return NULL;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/chmod.c newlib-ps3/libgloss/libsysbase/chmod.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/chmod.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/chmod.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/syscalls.h>
+#include <errno.h>
+
+int chmod(const char *path, mode_t mode)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.chmod_r)
+		return __syscalls.chmod_r(r,path,mode);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/close.c newlib-ps3/libgloss/libsysbase/close.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/close.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/close.c	2024-04-15 22:51:10
@@ -0,0 +1,20 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _close_r(struct _reent *ptr, int fd) {
+#else
+int _close(int fd) {
+	struct _reent *ptr = _REENT;
+#endif
+	if(__syscalls.close_r)
+		return __syscalls.close_r(ptr,fd);
+
+	ptr->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/closedir.c newlib-ps3/libgloss/libsysbase/closedir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/closedir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/closedir.c	2024-04-15 22:51:10
@@ -0,0 +1,17 @@
+#include <unistd.h>
+#include <reent.h>
+#include <string.h>
+#include <errno.h>
+#include <sys/dirent.h>
+#include <sys/syscalls.h>
+
+int closedir(DIR *dirp)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.closedir_r)
+		return __syscalls.closedir_r(r,dirp);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/dup.c newlib-ps3/libgloss/libsysbase/dup.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/dup.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/dup.c	2024-04-15 22:51:10
@@ -0,0 +1,11 @@
+#include <errno.h>
+#include <fcntl.h>
+#include <reent.h>
+
+int dup(int filedes)
+{
+	struct _reent *r = _REENT;
+	r->_errno = ENOSYS;
+	//return fcntl(filedes,F_DUPFD,0);
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/environ.c newlib-ps3/libgloss/libsysbase/environ.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/environ.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/environ.c	2024-04-15 22:51:10
@@ -0,0 +1,6 @@
+/*
+ * Version of environ for no OS
+ */
+
+char *__env[1] = {0};
+char **environ = __env;
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/execve.c newlib-ps3/libgloss/libsysbase/execve.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/execve.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/execve.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _execve_r(struct _reent *r, char *name, char * const argv[], char * const *env) {
+#else
+int _execve(const char *name, char * const argv[], char * const env[]) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.execve_r)
+		return __syscalls.execve_r(r,(char *)name,(char **)argv,(char **)env);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/fork.c newlib-ps3/libgloss/libsysbase/fork.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/fork.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/fork.c	2024-04-15 22:51:10
@@ -0,0 +1,14 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _fork_r(struct _reent *r) {
+#else
+int _fork(void) {
+	struct _reent *r = _REENT;
+#endif
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/fstat.c newlib-ps3/libgloss/libsysbase/fstat.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/fstat.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/fstat.c	2024-04-15 22:51:10
@@ -0,0 +1,21 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/syscalls.h>
+
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _fstat_r(struct _reent *r, int fd, struct stat *st) {
+#else
+int _fstat(int fd, struct stat *st) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.fstat_r)
+		return __syscalls.fstat_r(r,fd,st);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/fstat64.c newlib-ps3/libgloss/libsysbase/fstat64.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/fstat64.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/fstat64.c	2024-04-15 22:51:10
@@ -0,0 +1,21 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _fstat64_r(struct _reent *r, int fd, struct stat *st) {
+#else
+int _fstat64(int fd, struct stat *st) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.fstat64_r)
+		return __syscalls.fstat64_r(r,fd,st);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/fsync.c newlib-ps3/libgloss/libsysbase/fsync.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/fsync.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/fsync.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/syscalls.h>
+
+int fsync(int fd)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.fsync_r)
+		return __syscalls.fsync_r(r,fd);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/ftruncate.c newlib-ps3/libgloss/libsysbase/ftruncate.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/ftruncate.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/ftruncate.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/syscalls.h>
+
+int ftruncate(int fd, off_t len)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.ftruncate_r)
+		return __syscalls.ftruncate_r(r,fd,len);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/getpid.c newlib-ps3/libgloss/libsysbase/getpid.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/getpid.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/getpid.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _getpid_r(struct _reent *ptr) {
+#else
+int _getpid(void) {
+	struct _reent *ptr = _REENT;
+#endif
+	if(__syscalls.getpid_r)
+		return __syscalls.getpid_r(ptr);
+
+	ptr->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/getrusage.c newlib-ps3/libgloss/libsysbase/getrusage.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/getrusage.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/getrusage.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <reent.h>
+#include <sys/resource.h>
+#include <sys/syscalls.h>
+
+int getrusage(int who, struct rusage *r_usage)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.getrusage_r)
+		return __syscalls.getrusage_r(r,who,r_usage);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/gettod.c newlib-ps3/libgloss/libsysbase/gettod.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/gettod.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/gettod.c	2024-04-15 22:51:10
@@ -0,0 +1,20 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <sys/time.h>
+#include <sys/times.h>
+#include <sys/syscalls.h>
+#include <errno.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _gettimeofday_r(struct _reent *r, struct timeval *ptimeval, void *ptimezone) {
+#else
+int _gettimeofday(struct timeval *ptimeval, void *ptimezone) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.gettod_r)
+		return __syscalls.gettod_r(r,ptimeval,ptimezone);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/glob.c newlib-ps3/libgloss/libsysbase/glob.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/glob.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/glob.c	2024-04-15 22:51:10
@@ -0,0 +1,9 @@
+#include <glob.h>
+#include <errno.h>
+
+int glob(const char *pattern,int flags,int (*errfunc)(const char *epath,int eerrno),glob_t *pglob)
+{
+	if(errfunc)
+		errfunc((void *)0, ENOSYS);
+	return 0;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/globfree.c newlib-ps3/libgloss/libsysbase/globfree.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/globfree.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/globfree.c	2024-04-15 22:51:10
@@ -0,0 +1,6 @@
+#include <glob.h>
+
+void globfree(glob_t *pglob)
+{
+  return;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/isatty.c newlib-ps3/libgloss/libsysbase/isatty.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/isatty.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/isatty.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _isatty_r(struct _reent *ptr, int fd) {
+#else
+int isatty(int fd) {
+	struct _reent *ptr = _REENT;
+#endif
+	if(__syscalls.isatty_r)
+		return __syscalls.isatty_r(ptr,fd);
+
+	ptr->_errno = ENOTTY;
+	return 0;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/kill.c newlib-ps3/libgloss/libsysbase/kill.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/kill.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/kill.c	2024-04-15 22:51:10
@@ -0,0 +1,14 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _kill_r(struct _reent *r, int pid, int sig) {
+#else
+int _kill(int pid, int sig) {
+	struct _reent *r = _REENT;
+#endif
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/link.c newlib-ps3/libgloss/libsysbase/link.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/link.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/link.c	2024-04-16 06:56:50
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _link_r(struct _reent *r, const char *old, const char *new) {
+#else
+int _link(const char *old, const char *new) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.link_r)
+		return __syscalls.link_r(r,old,new);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/lock.c newlib-ps3/libgloss/libsysbase/lock.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/lock.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/lock.c	2024-04-15 22:51:10
@@ -0,0 +1,64 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <stdint.h>
+#include <sys/types.h>
+#include <sys/lock.h>
+#include <sys/syscalls.h>
+
+int32_t sys_lwmutex_create(sys_lwmutex_t *lwmutex,const sys_lwmutex_attr_t *attr)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.sys_lwmutex_create_r)
+		return __syscalls.sys_lwmutex_create_r(r,lwmutex,attr);
+	
+	r->_errno = ENOSYS;
+	return -1;
+}
+
+int32_t sys_lwmutex_destroy(sys_lwmutex_t *lwmutex)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.sys_lwmutex_destroy_r)
+		return __syscalls.sys_lwmutex_destroy_r(r,lwmutex);
+	
+	r->_errno = ENOSYS;
+	return -1;
+}
+
+int32_t sys_lwmutex_lock(sys_lwmutex_t *lwmutex, uint64_t timeout)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.sys_lwmutex_lock_r)
+		return __syscalls.sys_lwmutex_lock_r(r,lwmutex,timeout);
+	
+	r->_errno = ENOSYS;
+	return -1;
+}
+
+int32_t sys_lwmutex_trylock(sys_lwmutex_t *lwmutex)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.sys_lwmutex_trylock_r)
+		return __syscalls.sys_lwmutex_trylock_r(r,lwmutex);
+	
+	r->_errno = ENOSYS;
+	return -1;
+}
+
+int32_t sys_lwmutex_unlock(sys_lwmutex_t *lwmutex)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.sys_lwmutex_unlock_r)
+		return __syscalls.sys_lwmutex_unlock_r(r,lwmutex);
+	
+	r->_errno = ENOSYS;
+	return -1;
+}
+
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/lseek.c newlib-ps3/libgloss/libsysbase/lseek.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/lseek.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/lseek.c	2024-04-15 22:51:10
@@ -0,0 +1,20 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+_off_t _lseek_r(struct _reent *r, int fd, _off_t pos, int dir) {
+#else
+_off_t _lseek(int fd, _off_t pos, int dir) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.lseek_r)
+		return __syscalls.lseek_r(r,fd,pos,dir);
+
+	r->_errno = ENOSYS;
+	return (_off_t)-1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/lseek64.c newlib-ps3/libgloss/libsysbase/lseek64.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/lseek64.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/lseek64.c	2024-04-15 22:51:10
@@ -0,0 +1,20 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <reent.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+_off64_t _lseek64_r(struct _reent *r, int fd, _off64_t pos, int dir) {
+#else
+_off64_t _lseek64(int fd, _off64_t pos, int dir) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.lseek64_r)
+		return __syscalls.lseek64_r(r,fd,pos,dir);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/mkdir.c newlib-ps3/libgloss/libsysbase/mkdir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/mkdir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/mkdir.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/syscalls.h>
+
+int mkdir(const char *path, mode_t mode)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.mkdir_r)
+		return __syscalls.mkdir_r(r,path,mode);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/open.c newlib-ps3/libgloss/libsysbase/open.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/open.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/open.c	2024-04-15 22:51:10
@@ -0,0 +1,21 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <errno.h>
+#include <ctype.h>
+#include <string.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _open_r(struct _reent *r, const char *file, int flags, int mode) {
+#else
+int _open(const char *file, int flags, int mode) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.open_r)
+		return __syscalls.open_r(r,file,flags,mode);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/opendir.c newlib-ps3/libgloss/libsysbase/opendir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/opendir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/opendir.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/dirent.h>
+#include <sys/syscalls.h>
+
+DIR* opendir(const char *dir)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.opendir_r)
+		return __syscalls.opendir_r(r,dir);
+
+	r->_errno = ENOSYS;
+	return NULL;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/read.c newlib-ps3/libgloss/libsysbase/read.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/read.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/read.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+_ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len) {
+#else
+_READ_WRITE_RETURN_TYPE _read(int fd, void *ptr, size_t len) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.read_r)
+		return __syscalls.read_r(r,fd,ptr,len);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/readdir.c newlib-ps3/libgloss/libsysbase/readdir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/readdir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/readdir.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/dirent.h>
+#include <sys/syscalls.h>
+
+struct dirent* readdir(DIR *dirp)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.readdir_r)
+		return __syscalls.readdir_r(r,dirp);
+
+	r->_errno = ENOSYS;
+	return NULL;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/readdir_r.c newlib-ps3/libgloss/libsysbase/readdir_r.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/readdir_r.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/readdir_r.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/dirent.h>
+#include <sys/syscalls.h>
+
+int readdir_r(DIR *dirp,struct dirent *entry,struct dirent **result)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.readdir_r_r)
+		return __syscalls.readdir_r_r(r,dirp,entry,result);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/rename.c newlib-ps3/libgloss/libsysbase/rename.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/rename.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/rename.c	2024-04-16 06:57:16
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _rename_r(struct _reent *r, const char *old, const char *new) {
+#else
+int _rename(const char *old, const char *new) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.rename_r)
+		return __syscalls.rename_r(r,old,new);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/rewinddir.c newlib-ps3/libgloss/libsysbase/rewinddir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/rewinddir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/rewinddir.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/dirent.h>
+#include <sys/syscalls.h>
+
+void rewinddir(DIR *dirp)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.rewinddir_r)
+		__syscalls.rewinddir_r(r,dirp);
+	else
+		r->_errno = ENOSYS;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/rmdir.c newlib-ps3/libgloss/libsysbase/rmdir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/rmdir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/rmdir.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <reent.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+int rmdir(const char *dirname)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.rmdir_r)
+		return __syscalls.rmdir_r(r,dirname);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/sbrk.c newlib-ps3/libgloss/libsysbase/sbrk.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/sbrk.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/sbrk.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <sys/errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+void * _sbrk_r(struct _reent *ptr, ptrdiff_t incr) {
+#else
+void * _sbrk(ptrdiff_t incr) {
+	struct _reent *ptr = _REENT;
+#endif
+	if(__syscalls.sbrk_r)
+		return __syscalls.sbrk_r(ptr,incr);
+	else {
+		ptr->_errno = ENOMEM;
+		return (caddr_t)-1;
+	}
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/seekdir.c newlib-ps3/libgloss/libsysbase/seekdir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/seekdir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/seekdir.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/dirent.h>
+#include <sys/syscalls.h>
+
+void seekdir(DIR *dirp, long int off)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.seekdir_r)
+		__syscalls.seekdir_r(r,dirp,off);
+	else
+		r->_errno = ENOSYS;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/settod.c newlib-ps3/libgloss/libsysbase/settod.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/settod.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/settod.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <sys/time.h>
+#include <sys/times.h>
+#include <sys/syscalls.h>
+
+int settimeofday(const struct timeval *ptimeval, const struct timezone *ptimezone)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.settod_r)
+		return __syscalls.settod_r(r,ptimeval,ptimezone);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/sleep.c newlib-ps3/libgloss/libsysbase/sleep.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/sleep.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/sleep.c	2024-04-15 22:51:10
@@ -0,0 +1,28 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <unistd.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+int usleep(useconds_t usec)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.usleep_r)
+		return __syscalls.usleep_r(r,usec);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
+
+unsigned int sleep(unsigned int sec)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.sleep_r)
+		return __syscalls.sleep_r(r,sec);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/stat.c newlib-ps3/libgloss/libsysbase/stat.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/stat.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/stat.c	2024-04-16 06:57:00
@@ -0,0 +1,20 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _stat_r(struct _reent *r, const char *path, struct stat *st) {
+#else
+int _stat(const char *path, struct stat *st) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.stat_r)
+		return __syscalls.stat_r(r,path,st);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/stat64.c newlib-ps3/libgloss/libsysbase/stat64.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/stat64.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/stat64.c	2024-04-15 22:51:10
@@ -0,0 +1,21 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _stat64_r(struct _reent *r, const char *path, struct stat *st) {
+#else
+int _stat64(const char *path, struct stat *st) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.stat64_r)
+		return __syscalls.stat64_r(r,path,st);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/syscalls.c newlib-ps3/libgloss/libsysbase/syscalls.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/syscalls.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/syscalls.c	2024-04-15 22:51:10
@@ -0,0 +1,50 @@
+#include <sys/syscalls.h>
+
+struct __syscalls_t __syscalls = {
+	NULL,			// sbrk_r
+	NULL,			// close_r
+	NULL,			// open_r
+	NULL,			// read_r
+	NULL,			// write_r
+	NULL,			// lseek_r
+	NULL,			// lseek64_r
+	NULL,			// fstat_r
+	NULL,			// fstat64_r
+	NULL,			// stat_r
+	NULL,			// stat64_r
+	NULL,			// ftruncate_r
+	NULL,			// truncate_r
+	NULL,			// fsync_r
+	NULL,			// link_r
+	NULL,			// unlink_r
+	NULL,			// chmod_r
+	NULL,			// rename_r
+	NULL,			// utime_r
+	NULL,			// umask_r
+	NULL,			// mkdir_r
+	NULL,			// rmdir_r
+	NULL,			// chdir_r
+	NULL,			// getcwd_r
+	NULL,			// closedir_r
+	NULL,			// opendir_r
+	NULL,			// readdir_r
+	NULL,			// readdir_r_r
+	NULL,			// rewinddir_r
+	NULL,			// seekdir_r
+	NULL,			// telldir_r
+	NULL,			// getpid_r
+	NULL,			// isatty_r
+	NULL,			// execve_r
+	NULL,			// gettod_r
+	NULL,			// settod_r
+	NULL,			// usleep_r
+	NULL,			// getrusage_r
+	NULL,			// sleep_r
+	NULL,			// times_r
+	NULL,			// sys_lwmutex_create_r
+	NULL,			// sys_lwmutex_destroy_r
+	NULL,			// sys_lwmutex_lock_r
+	NULL,			// sys_lwmutex_trylock_r
+	NULL,			// sys_lwmutex_unlock_r
+	NULL			// exit
+};
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/telldir.c newlib-ps3/libgloss/libsysbase/telldir.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/telldir.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/telldir.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/dirent.h>
+#include <sys/syscalls.h>
+
+long int telldir(DIR *dirp)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.telldir_r)
+		return __syscalls.telldir_r(r,dirp);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/times.c newlib-ps3/libgloss/libsysbase/times.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/times.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/times.c	2024-04-15 22:51:10
@@ -0,0 +1,20 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <sys/times.h>
+#include <sys/syscalls.h>
+
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+clock_t _times_r(struct _reent *r, struct tms *buf) {
+#else
+clock_t _times(struct tms *buf) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.times_r)
+		return __syscalls.times_r(r,buf);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/truncate.c newlib-ps3/libgloss/libsysbase/truncate.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/truncate.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/truncate.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/syscalls.h>
+
+int truncate(const char *path, off_t len)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.truncate_r)
+		return __syscalls.truncate_r(r,path,len);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/umask.c newlib-ps3/libgloss/libsysbase/umask.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/umask.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/umask.c	2024-04-15 22:51:10
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <reent.h>
+#include <errno.h>
+#include <unistd.h>
+#include <sys/syscalls.h>
+
+mode_t umask(mode_t cmask)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.umask_r)
+		return __syscalls.umask_r(r,cmask);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/unlink.c newlib-ps3/libgloss/libsysbase/unlink.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/unlink.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/unlink.c	2024-04-16 07:01:17
@@ -0,0 +1,18 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _unlink_r(struct _reent *r, const char *name) {
+#else
+int _unlink(const char *name) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.unlink_r)
+		return __syscalls.unlink_r(r,name);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/utime.c newlib-ps3/libgloss/libsysbase/utime.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/utime.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/utime.c	2024-04-15 22:51:10
@@ -0,0 +1,19 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <sys/types.h>
+#include <reent.h>
+#include <errno.h>
+#include <utime.h>
+#include <sys/syscalls.h>
+
+int utime(const char *path,const struct utimbuf *times)
+{
+	struct _reent *r = _REENT;
+
+	if(__syscalls.utime_r)
+		return __syscalls.utime_r(r,path,times);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/wait.c newlib-ps3/libgloss/libsysbase/wait.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/wait.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/wait.c	2024-04-15 22:51:10
@@ -0,0 +1,14 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <errno.h>
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+int _wait_r(struct _reent *r, int *status) {
+#else
+int _wait(int *status) {
+	struct _reent *r = _REENT;
+#endif
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/warning.h newlib-ps3/libgloss/libsysbase/warning.h
--- newlib-4.4.0.20231231/libgloss/libsysbase/warning.h	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/warning.h	2024-04-15 22:51:10
@@ -0,0 +1,43 @@
+#ifndef __WARNING_H__
+#define __WARNING_H__
+
+#ifdef HAVE_GNU_LD
+# ifdef HAVE_ELF
+
+/* We want the .gnu.warning.SYMBOL section to be unallocated.  */
+#  ifdef HAVE_ASM_PREVIOUS_DIRECTIVE
+#   define __make_section_unallocated(section_string)   \
+  asm(".section " section_string "; .previous");
+#  elif defined (HAVE_ASM_POPSECTION_DIRECTIVE)
+#   define __make_section_unallocated(section_string)   \
+  asm(".pushsection " section_string "; .popsection");
+#  else
+#   define __make_section_unallocated(section_string)
+#  endif
+
+#  ifdef HAVE_SECTION_ATTRIBUTES
+#   define link_warning(symbol, msg)                     \
+  __make_section_unallocated (".gnu.warning." #symbol)  \
+  static const char __evoke_link_warning_##symbol[]     \
+    __attribute__ ((section (".gnu.warning." #symbol))) = msg;
+#  else
+#   define link_warning(symbol, msg)
+#  endif
+
+#else /* !ELF */
+
+#  define link_warning(symbol, msg)             \
+  asm(".stabs \"" msg "\",30,0,0,0\n"   \
+      ".stabs \"" __SYMBOL_PREFIX #symbol "\",1,0,0,0\n");
+# endif
+#else /* !GNULD */
+/* We will never be heard; they will all die horribly.  */
+# define link_warning(symbol, msg)
+#endif
+
+/* A canned warning for sysdeps/stub functions.  */
+#define stub_warning(name) \
+  link_warning (name, \
+                "warning: " #name " is not implemented and will always fail")
+
+#endif /* __WARNING_H__ */
diff -urpPN -x .git newlib-4.4.0.20231231/libgloss/libsysbase/write.c newlib-ps3/libgloss/libsysbase/write.c
--- newlib-4.4.0.20231231/libgloss/libsysbase/write.c	1970-01-01 01:00:00
+++ newlib-ps3/libgloss/libsysbase/write.c	2024-04-15 22:51:10
@@ -0,0 +1,20 @@
+#include "config.h"
+#include <_ansi.h>
+#include <_syslist.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/syscalls.h>
+
+
+#ifdef REENTRANT_SYSCALLS_PROVIDED
+_ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len) {
+#else
+_READ_WRITE_RETURN_TYPE _write(int fd, const void *ptr, size_t len) {
+	struct _reent *r = _REENT;
+#endif
+	if(__syscalls.write_r)
+		return __syscalls.write_r(r,fd,ptr,len);
+
+	r->_errno = ENOSYS;
+	return -1;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/Makefile.in newlib-ps3/newlib/Makefile.in
--- newlib-4.4.0.20231231/newlib/Makefile.in	2023-12-31 18:00:18
+++ newlib-ps3/newlib/Makefile.in	2024-04-14 18:01:04
@@ -548,6 +548,13 @@ check_PROGRAMS =
 @HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE@	libc/sys/mmixware/sbrk.c libc/sys/mmixware/stat.c libc/sys/mmixware/time.c libc/sys/mmixware/unlink.c libc/sys/mmixware/utime.c libc/sys/mmixware/wait.c libc/sys/mmixware/write.c \
 @HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE@	libc/sys/mmixware/times.c libc/sys/mmixware/gettime.c libc/sys/mmixware/setjmp.S
 
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@am__append_522 = \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/getreent.c \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/lock.c \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/lock_recursive.c \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/lock_internal.c \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/realpath.c
+
 @HAVE_LIBC_SYS_NETWARE_DIR_TRUE@am__append_52 = \
 @HAVE_LIBC_SYS_NETWARE_DIR_TRUE@	libc/sys/netware/getpid.c \
 @HAVE_LIBC_SYS_NETWARE_DIR_TRUE@	libc/sys/netware/link.c
@@ -1678,6 +1685,12 @@ am__objects_51 = libc/ssp/libc_a-chk_fail.$(OBJEXT) \
 @HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE@	libc/sys/mmixware/libc_a-times.$(OBJEXT) \
 @HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE@	libc/sys/mmixware/libc_a-gettime.$(OBJEXT) \
 @HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE@	libc/sys/mmixware/libc_a-setjmp.$(OBJEXT)
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@am__objects_622 =  \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/a-getreent.$(OBJEXT) \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/a-lock.$(OBJEXT) \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/a-lock_recursive.$(OBJEXT) \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/a-lock_internal.$(OBJEXT) \
+@HAVE_LIBC_SYS_LV2_DIR_TRUE@	libc/sys/lv2/a-realpath.$(OBJEXT)
 @HAVE_LIBC_SYS_NETWARE_DIR_TRUE@am__objects_63 = libc/sys/netware/libc_a-getpid.$(OBJEXT) \
 @HAVE_LIBC_SYS_NETWARE_DIR_TRUE@	libc/sys/netware/libc_a-link.$(OBJEXT)
 @HAVE_LIBC_SYS_OR1K_DIR_TRUE@am__objects_64 = libc/sys/or1k/libc_a-getreent.$(OBJEXT) \
@@ -2595,7 +2608,7 @@ am_libc_a_OBJECTS = $(am__objects_1) \
 	$(am__objects_49) $(am__objects_52) $(am__objects_53) \
 	$(am__objects_54) $(am__objects_55) $(am__objects_56) \
 	$(am__objects_57) $(am__objects_58) $(am__objects_59) \
-	$(am__objects_60) $(am__objects_61) $(am__objects_62) \
+	$(am__objects_60) $(am__objects_61) $(am__objects_62) $(am__objects_622) \
 	$(am__objects_63) $(am__objects_64) $(am__objects_65) \
 	$(am__objects_66) $(am__objects_67) $(am__objects_68) \
 	$(am__objects_69) $(am__objects_70) $(am__objects_71) \
@@ -4182,7 +4195,7 @@ libc_a_SOURCES = $(am__append_5) libc/stdlib/__adjust.
 	$(am__append_41) $(am__append_42) $(am__append_43) \
 	$(am__append_44) $(am__append_45) $(am__append_46) \
 	$(am__append_47) $(am__append_48) $(am__append_49) \
-	$(am__append_50) $(am__append_51) $(am__append_52) \
+	$(am__append_50) $(am__append_51) $(am__append_52) $(am__append_522) \
 	$(am__append_53) $(am__append_54) $(am__append_55) \
 	$(am__append_56) $(am__append_57) $(am__append_58) \
 	$(am__append_59) $(am__append_60) $(am__append_61) \
@@ -7456,6 +7469,22 @@ libc/sys/mmixware/libc_a-setjmp.$(OBJEXT):  \
 libc/sys/mmixware/libc_a-setjmp.$(OBJEXT):  \
 	libc/sys/mmixware/$(am__dirstamp) \
 	libc/sys/mmixware/$(DEPDIR)/$(am__dirstamp)
+libc/sys/lv2/$(am__dirstamp):
+	@$(MKDIR_P) libc/sys/lv2
+	@: > libc/sys/lv2/$(am__dirstamp)
+libc/sys/lv2/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) libc/sys/lv2/$(DEPDIR)
+	@: > libc/sys/lv2/$(DEPDIR)/$(am__dirstamp)
+libc/sys/lv2/a-getreent.$(OBJEXT): libc/sys/lv2/$(am__dirstamp) \
+	libc/sys/lv2/$(DEPDIR)/$(am__dirstamp)
+libc/sys/lv2/a-lock.$(OBJEXT): libc/sys/lv2/$(am__dirstamp) \
+	libc/sys/lv2/$(DEPDIR)/$(am__dirstamp)
+libc/sys/lv2/a-lock_recursive.$(OBJEXT): libc/sys/lv2/$(am__dirstamp) \
+	libc/sys/lv2/$(DEPDIR)/$(am__dirstamp)
+libc/sys/lv2/a-lock_internal.$(OBJEXT): libc/sys/lv2/$(am__dirstamp) \
+	libc/sys/lv2/$(DEPDIR)/$(am__dirstamp)
+libc/sys/lv2/a-realpath.$(OBJEXT): libc/sys/lv2/$(am__dirstamp) \
+	libc/sys/lv2/$(DEPDIR)/$(am__dirstamp)
 libc/sys/netware/$(am__dirstamp):
 	@$(MKDIR_P) libc/sys/netware
 	@: > libc/sys/netware/$(am__dirstamp)
@@ -12578,6 +12607,7 @@ mostlyclean-compile:
 	-rm -f libc/sys/epiphany/*.$(OBJEXT)
 	-rm -f libc/sys/h8300hms/*.$(OBJEXT)
 	-rm -f libc/sys/h8500hms/*.$(OBJEXT)
+	-rm -f libc/sys/lv2/*.$(OBJEXT)
 	-rm -f libc/sys/m88kbug/*.$(OBJEXT)
 	-rm -f libc/sys/mmixware/*.$(OBJEXT)
 	-rm -f libc/sys/netware/*.$(OBJEXT)
@@ -31527,6 +31557,76 @@ libc/sys/mmixware/libc_a-gettime.obj: libc/sys/mmixwar
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/mmixware/libc_a-gettime.obj `if test -f 'libc/sys/mmixware/gettime.c'; then $(CYGPATH_W) 'libc/sys/mmixware/gettime.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/mmixware/gettime.c'; fi`
 
+libc/sys/lv2/a-getreent.o: libc/sys/lv2/getreent.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-getreent.o -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-getreent.Tpo -c -o libc/sys/lv2/a-getreent.o `test -f 'libc/sys/lv2/getreent.c' || echo '$(srcdir)/'`libc/sys/lv2/getreent.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-getreent.Tpo libc/sys/lv2/$(DEPDIR)/a-getreent.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/getreent.c' object='libc/sys/lv2/a-getreent.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-getreent.o `test -f 'libc/sys/lv2/getreent.c' || echo '$(srcdir)/'`libc/sys/lv2/getreent.c
+
+libc/sys/lv2/a-getreent.obj: libc/sys/lv2/getreent.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-getreent.obj -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-getreent.Tpo -c -o libc/sys/lv2/a-getreent.obj `if test -f 'libc/sys/lv2/getreent.c'; then $(CYGPATH_W) 'libc/sys/lv2/getreent.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/getreent.c'; fi`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-getreent.Tpo libc/sys/lv2/$(DEPDIR)/a-getreent.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/getreent.c' object='libc/sys/lv2/a-getreent.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-getreent.obj `if test -f 'libc/sys/lv2/getreent.c'; then $(CYGPATH_W) 'libc/sys/lv2/getreent.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/getreent.c'; fi`
+
+libc/sys/lv2/a-lock.o: libc/sys/lv2/lock.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-lock.o -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-lock.Tpo -c -o libc/sys/lv2/a-lock.o `test -f 'libc/sys/lv2/lock.c' || echo '$(srcdir)/'`libc/sys/lv2/lock.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-lock.Tpo libc/sys/lv2/$(DEPDIR)/a-lock.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/lock.c' object='libc/sys/lv2/a-lock.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-lock.o `test -f 'libc/sys/lv2/lock.c' || echo '$(srcdir)/'`libc/sys/lv2/lock.c
+
+libc/sys/lv2/a-lock.obj: libc/sys/lv2/lock.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-lock.obj -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-lock.Tpo -c -o libc/sys/lv2/a-lock.obj `if test -f 'libc/sys/lv2/lock.c'; then $(CYGPATH_W) 'libc/sys/lv2/lock.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/lock.c'; fi`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-lock.Tpo libc/sys/lv2/$(DEPDIR)/a-lock.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/lock.c' object='libc/sys/lv2/a-lock.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-lock.obj `if test -f 'libc/sys/lv2/lock.c'; then $(CYGPATH_W) 'libc/sys/lv2/lock.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/lock.c'; fi`
+
+libc/sys/lv2/a-lock_recursive.o: libc/sys/lv2/lock_recursive.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-lock_recursive.o -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-lock_recursive.Tpo -c -o libc/sys/lv2/a-lock_recursive.o `test -f 'libc/sys/lv2/lock_recursive.c' || echo '$(srcdir)/'`libc/sys/lv2/lock_recursive.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-lock_recursive.Tpo libc/sys/lv2/$(DEPDIR)/a-lock_recursive.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/lock_recursive.c' object='libc/sys/lv2/a-lock_recursive.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-lock_recursive.o `test -f 'libc/sys/lv2/lock_recursive.c' || echo '$(srcdir)/'`libc/sys/lv2/lock_recursive.c
+
+libc/sys/lv2/a-lock_recursive.obj: libc/sys/lv2/lock_recursive.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-lock_recursive.obj -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-lock_recursive.Tpo -c -o libc/sys/lv2/a-lock_recursive.obj `if test -f 'libc/sys/lv2/lock_recursive.c'; then $(CYGPATH_W) 'libc/sys/lv2/lock_recursive.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/lock_recursive.c'; fi`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-lock_recursive.Tpo libc/sys/lv2/$(DEPDIR)/a-lock_recursive.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/lock_recursive.c' object='libc/sys/lv2/a-lock_recursive.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-lock_recursive.obj `if test -f 'libc/sys/lv2/lock_recursive.c'; then $(CYGPATH_W) 'libc/sys/lv2/lock_recursive.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/lock_recursive.c'; fi`
+
+libc/sys/lv2/a-lock_internal.o: libc/sys/lv2/lock_internal.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-lock_internal.o -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-lock_internal.Tpo -c -o libc/sys/lv2/a-lock_internal.o `test -f 'libc/sys/lv2/lock_internal.c' || echo '$(srcdir)/'`libc/sys/lv2/lock_internal.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-lock_internal.Tpo libc/sys/lv2/$(DEPDIR)/a-lock_internal.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/lock_internal.c' object='libc/sys/lv2/a-lock_internal.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-lock_internal.o `test -f 'libc/sys/lv2/lock_internal.c' || echo '$(srcdir)/'`libc/sys/lv2/lock_internal.c
+
+libc/sys/lv2/a-lock_internal.obj: libc/sys/lv2/lock_internal.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-lock_internal.obj -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-lock_internal.Tpo -c -o libc/sys/lv2/a-lock_internal.obj `if test -f 'libc/sys/lv2/lock_internal.c'; then $(CYGPATH_W) 'libc/sys/lv2/lock_internal.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/lock_internal.c'; fi`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-lock_internal.Tpo libc/sys/lv2/$(DEPDIR)/a-lock_internal.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/lock_internal.c' object='libc/sys/lv2/a-lock_internal.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-lock_internal.obj `if test -f 'libc/sys/lv2/lock_internal.c'; then $(CYGPATH_W) 'libc/sys/lv2/lock_internal.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/lock_internal.c'; fi`
+
+libc/sys/lv2/a-realpath.o: libc/sys/lv2/realpath.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-realpath.o -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-realpath.Tpo -c -o libc/sys/lv2/a-realpath.o `test -f 'libc/sys/lv2/realpath.c' || echo '$(srcdir)/'`libc/sys/lv2/realpath.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-realpath.Tpo libc/sys/lv2/$(DEPDIR)/a-realpath.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/realpath.c' object='libc/sys/lv2/a-realpath.o' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-realpath.o `test -f 'libc/sys/lv2/realpath.c' || echo '$(srcdir)/'`libc/sys/lv2/realpath.c
+
+libc/sys/lv2/a-realpath.obj: libc/sys/lv2/realpath.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/lv2/a-realpath.obj -MD -MP -MF libc/sys/lv2/$(DEPDIR)/a-realpath.Tpo -c -o libc/sys/lv2/a-realpath.obj `if test -f 'libc/sys/lv2/realpath.c'; then $(CYGPATH_W) 'libc/sys/lv2/realpath.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/realpath.c'; fi`
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/lv2/$(DEPDIR)/a-realpath.Tpo libc/sys/lv2/$(DEPDIR)/a-realpath.Po
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='libc/sys/lv2/realpath.c' object='libc/sys/lv2/a-realpath.obj' libtool=no @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -c -o libc/sys/lv2/a-realpath.obj `if test -f 'libc/sys/lv2/realpath.c'; then $(CYGPATH_W) 'libc/sys/lv2/realpath.c'; else $(CYGPATH_W) '$(srcdir)/libc/sys/lv2/realpath.c'; fi`
+
 libc/sys/netware/libc_a-getpid.o: libc/sys/netware/getpid.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libc_a_CPPFLAGS) $(CPPFLAGS) $(libc_a_CFLAGS) $(CFLAGS) -MT libc/sys/netware/libc_a-getpid.o -MD -MP -MF libc/sys/netware/$(DEPDIR)/libc_a-getpid.Tpo -c -o libc/sys/netware/libc_a-getpid.o `test -f 'libc/sys/netware/getpid.c' || echo '$(srcdir)/'`libc/sys/netware/getpid.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) libc/sys/netware/$(DEPDIR)/libc_a-getpid.Tpo libc/sys/netware/$(DEPDIR)/libc_a-getpid.Po
@@ -50260,6 +50360,8 @@ distclean-generic:
 	-rm -f libc/sys/h8300hms/$(am__dirstamp)
 	-rm -f libc/sys/h8500hms/$(DEPDIR)/$(am__dirstamp)
 	-rm -f libc/sys/h8500hms/$(am__dirstamp)
+	-rm -f libc/sys/lv2/$(DEPDIR)/$(am__dirstamp)
+	-rm -f libc/sys/lv2/$(am__dirstamp)
 	-rm -f libc/sys/m88kbug/$(DEPDIR)/$(am__dirstamp)
 	-rm -f libc/sys/m88kbug/$(am__dirstamp)
 	-rm -f libc/sys/mmixware/$(DEPDIR)/$(am__dirstamp)
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/configure newlib-ps3/newlib/configure
--- newlib-4.4.0.20231231/newlib/configure	2023-12-31 18:00:18
+++ newlib-ps3/newlib/configure	2024-04-14 17:52:01
@@ -803,6 +803,8 @@ HAVE_LIBC_SYS_NETWARE_DIR_TRUE
 HAVE_LIBC_SYS_OR1K_DIR_TRUE
 HAVE_LIBC_SYS_NETWARE_DIR_FALSE
 HAVE_LIBC_SYS_NETWARE_DIR_TRUE
+HAVE_LIBC_SYS_LV2_DIR_FALSE
+HAVE_LIBC_SYS_LV2_DIR_TRUE
 HAVE_LIBC_SYS_MMIXWARE_DIR_FALSE
 HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE
 HAVE_LIBC_SYS_M88KBUG_DIR_FALSE
@@ -5421,6 +5423,13 @@ fi
   HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE='#'
   HAVE_LIBC_SYS_MMIXWARE_DIR_FALSE=
 fi
+ if test "${sys_dir}" = lv2; then
+  HAVE_LIBC_SYS_LV2_DIR_TRUE=
+  HAVE_LIBC_SYS_LV2_DIR_FALSE='#'
+else
+  HAVE_LIBC_SYS_LV2_DIR_TRUE='#'
+  HAVE_LIBC_SYS_LV2_DIR_FALSE=
+fi
  if test "${sys_dir}" = netware; then
   HAVE_LIBC_SYS_NETWARE_DIR_TRUE=
   HAVE_LIBC_SYS_NETWARE_DIR_FALSE='#'
@@ -7645,6 +7654,10 @@ if test -z "${HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE}" && tes
 fi
 if test -z "${HAVE_LIBC_SYS_MMIXWARE_DIR_TRUE}" && test -z "${HAVE_LIBC_SYS_MMIXWARE_DIR_FALSE}"; then
   as_fn_error $? "conditional \"HAVE_LIBC_SYS_MMIXWARE_DIR\" was never defined.
+Usually this means the macro was only invoked conditionally." "$LINENO" 5
+fi
+if test -z "${HAVE_LIBC_SYS_LV2_DIR_TRUE}" && test -z "${HAVE_LIBC_SYS_LV2_DIR_FALSE}"; then
+  as_fn_error $? "conditional \"HAVE_LIBC_SYS_LV2_DIR\" was never defined.
 Usually this means the macro was only invoked conditionally." "$LINENO" 5
 fi
 if test -z "${HAVE_LIBC_SYS_NETWARE_DIR_TRUE}" && test -z "${HAVE_LIBC_SYS_NETWARE_DIR_FALSE}"; then
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/configure.host newlib-ps3/newlib/configure.host
--- newlib-4.4.0.20231231/newlib/configure.host	2023-12-31 18:00:18
+++ newlib-ps3/newlib/configure.host	2024-04-15 04:36:16
@@ -285,6 +285,12 @@ case "${host_cpu}" in
 	machine_dir=nvptx
 	newlib_cflags="${newlib_cflags} -DCLOCK_PROVIDED -DMALLOC_PROVIDED"
 	;;
+  powerpc64-ps3-elf)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DREENTRANT_SYSCALLS_PROVIDED"
+	newlib_cflags="${newlib_cflags} -ffunction-sections -fdata-sections"
+	syscall_dir=syscalls
+	;;
   or1k*|or1knd*)
 	machine_dir=or1k
 	have_init_fini=no
@@ -510,6 +516,10 @@ case "${host}" in
 	sys_dir=sysvi386
 	unix_dir=unix
 	;;
+  *-ps3-*)
+	sys_dir=lv2
+	have_crt0="no"
+	;;
 
   m68hc11-*-*|m6811-*-*|m6812-*-*|m68hc12-*-*)
 	;;
@@ -796,6 +806,12 @@ newlib_cflags="${newlib_cflags} -DCLOCK_PROVIDED -DMAL
 	newlib_cflags="${newlib_cflags} -DHAVE_RENAME -DHAVE_SYSTEM -DMISSING_SYSCALL_NAMES"
 	;;
   nds32*)
+	syscall_dir=syscalls
+	;;
+  powerpc64-ps3-elf)
+	default_newlib_io_long_long="yes"
+	newlib_cflags="${newlib_cflags} -DREENTRANT_SYSCALLS_PROVIDED"
+	newlib_cflags="${newlib_cflags} -ffunction-sections -fdata-sections"
 	syscall_dir=syscalls
 	;;
   or1k*|or1knd*)
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/acinclude.m4 newlib-ps3/newlib/libc/acinclude.m4
--- newlib-4.4.0.20231231/newlib/libc/acinclude.m4	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/acinclude.m4	2024-04-14 17:49:18
@@ -17,6 +17,7 @@ m4_foreach_w([SYS_DIR], [
   epiphany
   h8300hms h8500hms
   m88kbug mmixware
+  lv2
   netware
   or1k
   rdos rtems
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/include/dirent.h newlib-ps3/newlib/libc/include/dirent.h
--- newlib-4.4.0.20231231/newlib/libc/include/dirent.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/include/dirent.h	2022-02-13 13:28:39
@@ -45,7 +45,9 @@ int	 alphasort(const struct dirent **, const struct di
 __BEGIN_DECLS
 #if __MISC_VISIBLE || __POSIX_VISIBLE >= 200809 || __XSI_VISIBLE >= 700
 int	 alphasort(const struct dirent **, const struct dirent **);
+#if !defined(__lv2ppu__) && !defined(__SPU__)
 int	 dirfd(DIR *);
+#endif
 #endif
 #if __BSD_VISIBLE
 int	 fdclosedir(DIR *);
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/include/math.h newlib-ps3/newlib/libc/include/math.h
--- newlib-4.4.0.20231231/newlib/libc/include/math.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/include/math.h	2024-04-14 17:46:45
@@ -124,13 +124,17 @@ extern int isnanl (long double);
 extern int isinfl (long double);
 extern int isnanl (long double);
 #endif
+#ifndef __SPU__
 #if !defined(__cplusplus) || __cplusplus < 201103L
 extern int isinf (double);
 #endif
+#endif
 #endif /* __MISC_VISIBLE */
+#ifndef __SPU__
 #if (__MISC_VISIBLE || (__XSI_VISIBLE && __XSI_VISIBLE < 600)) \
   && (!defined(__cplusplus) || __cplusplus < 201103L)
 extern int isnan (double);
+#endif
 #endif
 
 #if __ISO_C_VISIBLE >= 1999
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/include/stdlib.h newlib-ps3/newlib/libc/include/stdlib.h
--- newlib-4.4.0.20231231/newlib/libc/include/stdlib.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/include/stdlib.h	2022-02-13 07:35:02
@@ -289,6 +289,10 @@ int	posix_memalign (void **, size_t, size_t) __nonnull
 	    __result_use_check;
 #endif
 
+#ifdef __lv2ppu__
+char * realpath(const char *__p, char *__rp);
+#endif
+
 char *	_dtoa_r (struct _reent *, double, int, int, int *, int*, char**);
 #ifndef __CYGWIN__
 void *	_malloc_r (struct _reent *, size_t) _NOTHROW;
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/include/sys/config.h newlib-ps3/newlib/libc/include/sys/config.h
--- newlib-4.4.0.20231231/newlib/libc/include/sys/config.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/include/sys/config.h	2024-04-13 17:39:29
@@ -244,6 +244,11 @@
 #define __DYNAMIC_REENT__
 #endif
 
+#if defined(__PPU__) || defined(__lv2ppu__)
+/* we want the reentrancy structure to be returned by a function */
+#define __DYNAMIC_REENT__
+#endif
+
 #ifndef __EXPORT
 #define __EXPORT
 #endif
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/include/sys/select.h newlib-ps3/newlib/libc/include/sys/select.h
--- newlib-4.4.0.20231231/newlib/libc/include/sys/select.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/include/sys/select.h	2024-04-13 17:45:15
@@ -32,10 +32,10 @@ typedef	__sigset_t	sigset_t;
 #  define FD_SETSIZE	1024
 # else
 #  define FD_SETSIZE	64
+typedef unsigned long	__fd_mask;
 # endif
 #endif
 
-typedef unsigned long	__fd_mask;
 #if __BSD_VISIBLE
 typedef __fd_mask	fd_mask;
 #endif
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/include/sys/types.h newlib-ps3/newlib/libc/include/sys/types.h
--- newlib-4.4.0.20231231/newlib/libc/include/sys/types.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/include/sys/types.h	2022-02-13 07:35:02
@@ -115,8 +115,10 @@ typedef	_TIME_T_	time_t;
 #define	_TIME_T_DECLARED
 #endif
 
-typedef	__daddr_t	daddr_t;
-
+#ifndef __daddr_t_defined
+typedef	long	daddr_t;
+#define __daddr_t_defined
+#endif
 #ifndef __caddr_t_defined
 typedef	char *	caddr_t;
 #define __caddr_t_defined
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/machine/spu/include/fenv.h newlib-ps3/newlib/libc/machine/spu/include/fenv.h
--- newlib-4.4.0.20231231/newlib/libc/machine/spu/include/fenv.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/machine/spu/include/fenv.h	2022-02-13 10:13:05
@@ -41,10 +41,10 @@ extern "C" {
 #endif
 
 /* Exception */
-void feclearexcept(int excepts);
-void fegetexceptflag(fexcept_t *flagp, int excepts);
-void feraiseexcept(int excepts);
-void fesetexceptflag(const fexcept_t *flagp, int excepts);
+int feclearexcept(int excepts);
+int fegetexceptflag(fexcept_t *flagp, int excepts);
+int feraiseexcept(int excepts);
+int fesetexceptflag(const fexcept_t *flagp, int excepts);
 int fetestexcept(int excepts);
 
 /* Rounding mode */
@@ -52,10 +52,10 @@ int fesetround(int rounding_mode);
 int fesetround(int rounding_mode);
 
 /* Float environment */
-void fegetenv(fenv_t *envp);
+int fegetenv(fenv_t *envp);
 int feholdexcept(fenv_t *envp);
-void fesetenv(const fenv_t *envp);
-void feupdateenv(const fenv_t *envp);
+int fesetenv(const fenv_t *envp);
+int feupdateenv(const fenv_t *envp);
 
 #ifdef __cplusplus
 }
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/machine/spu/sys/fenv.h newlib-ps3/newlib/libc/machine/spu/sys/fenv.h
--- newlib-4.4.0.20231231/newlib/libc/machine/spu/sys/fenv.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/machine/spu/sys/fenv.h	2022-02-13 10:41:22
@@ -138,7 +138,7 @@ typedef unsigned int fenv_t;
 typedef unsigned int fexcept_t;
 typedef unsigned int fenv_t;
 
-extern const fenv_t __fe_dfl_env;
+extern fenv_t __fe_dfl_env;
 #define FE_DFL_ENV	(&__fe_dfl_env)
 
 #endif /* fenv.h */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/machine/spu/sys/sched.h newlib-ps3/newlib/libc/machine/spu/sys/sched.h
--- newlib-4.4.0.20231231/newlib/libc/machine/spu/sys/sched.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/machine/spu/sys/sched.h	2022-02-13 08:33:52
@@ -6,6 +6,10 @@ int sched_yield(void);
 
 int sched_yield(void);
 
+struct sched_param {
+  int sched_priority;           /* Process execution scheduling priority */
+};
+
 #ifdef __cplusplus
 }
 #endif
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/Makefile.inc newlib-ps3/newlib/libc/sys/Makefile.inc
--- newlib-4.4.0.20231231/newlib/libc/sys/Makefile.inc	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libc/sys/Makefile.inc	2024-04-14 17:48:45
@@ -25,6 +25,9 @@ endif
 if HAVE_LIBC_SYS_MMIXWARE_DIR
 include %D%/mmixware/Makefile.inc
 endif
+if HAVE_LIBC_SYS_LV2_DIR
+include %D%/lv2/Makefile.inc
+endif
 if HAVE_LIBC_SYS_NETWARE_DIR
 include %D%/netware/Makefile.inc
 endif
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/Makefile.inc newlib-ps3/newlib/libc/sys/lv2/Makefile.inc
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/Makefile.inc	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/Makefile.inc	2024-04-13 19:10:55
@@ -0,0 +1,6 @@
+libc_a_SOURCES += \
+	%D%/getreent.c \
+	%D%/lock.c \
+	%D%/lock_recursive.c \
+	%D%/lock_internal.c \
+	%D%/realpath.c
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/getreent.c newlib-ps3/newlib/libc/sys/lv2/getreent.c
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/getreent.c	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/getreent.c	2024-04-13 18:36:31
@@ -0,0 +1,15 @@
+#include <reent.h>
+
+static __thread struct _reent t_reent;
+static __thread struct _reent *t_reentp = 0;
+
+struct _reent* __getreent(void)
+{
+	struct _reent *r = t_reentp;
+
+	if(!r) {
+		t_reentp = r = &t_reent;
+		_REENT_INIT_PTR(r);
+	}
+	return r;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/lock.c newlib-ps3/newlib/libc/sys/lv2/lock.c
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/lock.c	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/lock.c	2024-04-13 18:36:31
@@ -0,0 +1,37 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/lock.h>
+
+#include "lock_internal.h"
+
+int __libc_lock_init(__libc_lock_t *lock)
+{
+	return sys_lwmutex_create(lock,&__libc_lock_attributes);
+}
+
+int __libc_lock_close(__libc_lock_t *lock)
+{
+	return sys_lwmutex_destroy(lock);
+}
+
+int __libc_lock_acquire(__libc_lock_t *lock)
+{
+	if(SYS_LWMUTEX_UNINITIALIZED(lock))
+		__libc_auto_lock_allocate(lock);
+	return  sys_lwmutex_lock(lock,0);
+}
+
+int __libc_lock_try_acquire(__libc_lock_t *lock)
+{
+	if(SYS_LWMUTEX_UNINITIALIZED(lock))
+		__libc_auto_lock_allocate(lock);
+	return sys_lwmutex_trylock(lock);
+}
+
+int __libc_lock_release(__libc_lock_t *lock)
+{
+	if(SYS_LWMUTEX_UNINITIALIZED(lock))
+		__libc_auto_lock_allocate(lock);
+	return sys_lwmutex_unlock(lock);
+}
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/lock_internal.c newlib-ps3/newlib/libc/sys/lv2/lock_internal.c
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/lock_internal.c	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/lock_internal.c	2024-04-13 18:36:31
@@ -0,0 +1,29 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/lock.h>
+
+#include "lock_internal.h"
+
+static sys_lwmutex_t metaLock;
+
+static void init_metalock(void) __attribute__((constructor(105)));
+static void init_metalock(void)
+{
+	if(sys_lwmutex_create(&metaLock,&__libc_lock_attributes))
+		abort();
+}
+
+void __libc_auto_lock_allocate(sys_lwmutex_t *lwmutex)
+{
+	if(sys_lwmutex_lock(&metaLock,0))
+		abort();
+
+	if(SYS_LWMUTEX_UNINITIALIZED(lwmutex)) {
+		if(sys_lwmutex_create(lwmutex,&__libc_lock_attributes))
+			abort();
+	}
+
+	if(sys_lwmutex_unlock(&metaLock))
+		abort();
+}
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/lock_internal.h newlib-ps3/newlib/libc/sys/lv2/lock_internal.h
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/lock_internal.h	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/lock_internal.h	2024-04-13 18:36:31
@@ -0,0 +1,32 @@
+#ifndef __SYS_LOCK_INTERNAL_H__
+#define __SYS_LOCK_INTERNAL_H__
+
+#include <stdint.h>
+
+#define SYS_LWMUTEX_ATTR_PROTOCOL			0x0002
+#define SYS_LWMUTEX_ATTR_RECURSIVE			0x0010
+
+#define SYS_LWMUTEX_UNINITIALIZED(plwm)		(!((plwm)->attribute))
+
+typedef struct _sys_lwmutex sys_lwmutex_t;
+
+typedef struct _sys_lwmutex_attr
+{
+	uint32_t attr_protocol;
+	uint32_t attr_recursive;
+	char name[8];
+}sys_lwmutex_attr_t;
+
+static const sys_lwmutex_attr_t __libc_lock_attributes = {
+	SYS_LWMUTEX_ATTR_PROTOCOL,SYS_LWMUTEX_ATTR_RECURSIVE,""
+};
+
+extern void __libc_auto_lock_allocate(sys_lwmutex_t *lwmutex);
+
+extern int32_t sys_lwmutex_create(sys_lwmutex_t *lwmutex,const sys_lwmutex_attr_t *attr);
+extern int32_t sys_lwmutex_destroy(sys_lwmutex_t *lwmutex);
+extern int32_t sys_lwmutex_lock(sys_lwmutex_t *lwmutex, uint64_t timeout);
+extern int32_t sys_lwmutex_trylock(sys_lwmutex_t *lwmutex);
+extern int32_t sys_lwmutex_unlock(sys_lwmutex_t *lwmutex);
+
+#endif
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/lock_recursive.c newlib-ps3/newlib/libc/sys/lv2/lock_recursive.c
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/lock_recursive.c	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/lock_recursive.c	2024-04-13 18:36:31
@@ -0,0 +1,37 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/lock.h>
+
+#include "lock_internal.h"
+
+int __libc_lock_init_recursive(__libc_lock_t *lock)
+{
+	return sys_lwmutex_create(lock,&__libc_lock_attributes);
+}
+
+int __libc_lock_close_recursive(__libc_lock_t *lock)
+{
+	return sys_lwmutex_destroy(lock);
+}
+
+int __libc_lock_acquire_recursive(__libc_lock_t *lock)
+{
+	if(SYS_LWMUTEX_UNINITIALIZED(lock))
+		__libc_auto_lock_allocate(lock);
+	return  sys_lwmutex_lock(lock,0);
+}
+
+int __libc_lock_try_acquire_recursive(__libc_lock_t *lock)
+{
+	if(SYS_LWMUTEX_UNINITIALIZED(lock))
+		__libc_auto_lock_allocate(lock);
+	return sys_lwmutex_trylock(lock);
+}
+
+int __libc_lock_release_recursive(__libc_lock_t *lock)
+{
+	if(SYS_LWMUTEX_UNINITIALIZED(lock))
+		__libc_auto_lock_allocate(lock);
+	return sys_lwmutex_unlock(lock);
+}
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/machine/_types.h newlib-ps3/newlib/libc/sys/lv2/machine/_types.h
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/machine/_types.h	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/machine/_types.h	2024-04-13 18:36:31
@@ -0,0 +1,17 @@
+#ifndef _MACHINE__TYPES_H
+#define _MACHINE__TYPES_H
+
+#include <machine/_default_types.h>
+
+#ifndef FD_SETSIZE
+#define FD_SETSIZE 1024
+typedef unsigned int __fd_mask;
+#endif
+
+#define __machine_fpos_t_defined
+typedef long long _fpos_t;
+
+#define __machine_off_t_defined
+typedef long long _off_t;
+
+#endif // _MACHINE__TYPES_H
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/realpath.c newlib-ps3/newlib/libc/sys/lv2/realpath.c
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/realpath.c	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/realpath.c	2024-04-13 18:36:31
@@ -0,0 +1,76 @@
+#include <errno.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/syslimits.h>
+#include <unistd.h>
+
+static int resolve_path(char *path, char *result, char *pos)
+{
+	if (*path == '/') {
+		*result = '/';
+		pos = result+1;
+		++path;
+	}
+
+	*pos = 0;
+	if (!*path)
+		return 0;
+
+	while (1) {
+		char *slash = *path ? strchr(path,'/') : NULL;
+		if (slash)
+			*slash = 0;
+
+		if (!path[0] || (path[0] == '.' && (!path[1] || (path[1] == '.' && !path[2])))) {
+			--pos;
+			if (pos != result && path[0] && path[1])
+				while (*--pos != '/');
+		}
+		else {
+			strcpy(pos,path);
+			pos = strchr(result,0);
+		}
+
+		if (slash) {
+		*pos++ = '/';
+		path = slash + 1;
+		}
+
+		*pos = 0;
+		if (!slash)
+			break;
+	}
+
+	return 0;
+}
+
+char *realpath(const char *path, char *resolved_path)
+{
+	char cwd[PATH_MAX + 1];
+	char *path_copy;
+	int res;
+
+	if (!*path) {
+		errno = ENOENT;
+		return NULL;
+	}
+
+	if (!getcwd(cwd, sizeof(cwd)))
+		return NULL;
+
+	strcpy(resolved_path, "/");
+	if (resolve_path(cwd, resolved_path, resolved_path))
+		return NULL;
+
+	strcat(resolved_path, "/");
+	path_copy = strdup(path);
+	if (!path_copy)
+		return NULL;
+
+	res = resolve_path(path_copy, resolved_path, strchr(resolved_path, 0));
+	free(path_copy);
+	if (res)
+		return NULL;
+
+	return resolved_path;
+}
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/sys/dirent.h newlib-ps3/newlib/libc/sys/lv2/sys/dirent.h
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/sys/dirent.h	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/sys/dirent.h	2024-04-13 18:36:31
@@ -0,0 +1,63 @@
+#ifndef __SYS_DIRENT_H__
+#define __SYS_DIRENT_H__
+
+#include <stdint.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/param.h>
+
+#define DT_INVALID			0xff
+#define DT_UNKNOWN			0
+#define DT_FIFO				DT_INVALID
+#define DT_CHR				DT_INVALID
+#define DT_DIR				1
+#define DT_BLK				DT_INVALID
+#define DT_REG				2
+#define DT_LNK				3
+#define DT_SOCK				DT_INVALID
+#define DT_WHT				DT_INVALID
+
+#define dirfd(dp)			((dp)->dd_fd)
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef struct _dirdesc
+{
+	int32_t dd_fd;
+	int32_t dd_loc;
+	int32_t dd_size;
+	void    *dd_buf;
+	size_t  dd_len;
+	int32_t dd_seek;
+	int32_t dd_rewind;
+	int32_t dd_flags;
+} DIR;
+
+struct dirent
+{
+	union {
+		ino_t   d_ino;
+		ino_t   d_fileno;
+	};
+	uint8_t         d_type;
+	uint16_t        d_seekoff;
+	uint16_t        d_reclen;
+	uint16_t        d_namlen;
+	char            d_name[MAXPATHLEN + 1];
+};
+
+int closedir(DIR *dirp);
+DIR *opendir(const char *dirname);
+struct dirent *readdir(DIR *dirp);
+int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
+void rewinddir(DIR *dirp);
+void seekdir(DIR *dirp, long int loc);
+long int telldir(DIR *dirp);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif //__DIRENT_H__
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/sys/lock.h newlib-ps3/newlib/libc/sys/lv2/sys/lock.h
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/sys/lock.h	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/sys/lock.h	2024-04-13 18:36:31
@@ -0,0 +1,47 @@
+#ifndef __SYS_LOCK_H__
+#define __SYS_LOCK_H__
+
+#include <stdint.h>
+
+struct _sys_lwmutex
+{
+	uint64_t lock_var;
+	uint32_t attribute;
+	uint32_t recursive_count;
+	uint32_t sleep_queue;
+	uint32_t _pad;
+};
+
+typedef struct _sys_lwmutex __libc_lock_t, __libc_lock_recursive_t;
+
+#define __libc_lock_define_initialized(CLASS,NAME) CLASS __libc_lock_t NAME = {0,};
+#define __libc_lock_define_initialized_recursive(CLASS,NAME) CLASS __libc_lock_recursive_t NAME = {0,};
+
+int __libc_lock_init(__libc_lock_t *lock);
+int __libc_lock_init_recursive(__libc_lock_recursive_t *lock);
+int __libc_lock_close(__libc_lock_t *lock);
+int __libc_lock_close_recursive(__libc_lock_recursive_t *lock);
+int __libc_lock_acquire(__libc_lock_t *lock);
+int __libc_lock_acquire_recursive(__libc_lock_recursive_t *lock);
+int __libc_lock_try_acquire(__libc_lock_t *lock);
+int __libc_lock_try_acquire_recursive(__libc_lock_recursive_t *lock);
+int __libc_lock_release(__libc_lock_t *lock);
+int __libc_lock_release_recursive(__libc_lock_recursive_t *lock);
+
+typedef __libc_lock_t _LOCK_T;
+typedef __libc_lock_recursive_t _LOCK_RECURSIVE_T;
+
+#define __LOCK_INIT(CLASS, NAME) __libc_lock_define_initialized(CLASS, NAME)
+#define __LOCK_INIT_RECURSIVE(CLASS, NAME) __libc_lock_define_initialized_recursive(CLASS, NAME)
+#define __lock_init(NAME) __libc_lock_init(&(NAME))
+#define __lock_init_recursive(NAME) __libc_lock_init_recursive(&(NAME))
+#define __lock_close(NAME) __libc_lock_close(&(NAME))
+#define __lock_close_recursive(NAME) __libc_lock_close_recursive(&(NAME))
+#define __lock_acquire(NAME) __libc_lock_acquire(&(NAME))
+#define __lock_acquire_recursive(NAME) __libc_lock_acquire_recursive(&(NAME))
+#define __lock_try_acquire(NAME) __libc_lock_try_acquire(&(NAME))
+#define __lock_try_acquire_recursive(NAME) __libc_lock_try_acquire_recursive(&(NAME))
+#define __lock_release(NAME) __libc_lock_release(&(NAME))
+#define __lock_release_recursive(NAME) __libc_lock_release_recursive(&(NAME))
+
+#endif /* __SYS_LOCK_H__ */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/sys/syscalls.h newlib-ps3/newlib/libc/sys/lv2/sys/syscalls.h
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/sys/syscalls.h	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/sys/syscalls.h	2024-04-13 18:36:31
@@ -0,0 +1,73 @@
+#ifndef __SYSCALLS_H__
+#define __SYSCALLS_H__
+
+#include <sys/reent.h>
+#include <sys/types.h>
+#include <sys/time.h>
+#include <sys/times.h>
+#include <sys/stat.h>
+#include <sys/dirent.h>
+#include <sys/resource.h>
+#include <utime.h>
+
+typedef struct _sys_lwmutex sys_lwmutex_t;
+typedef struct _sys_lwmutex_attr sys_lwmutex_attr_t;
+
+struct __syscalls_t {
+	caddr_t (*sbrk_r)(struct _reent *r,ptrdiff_t incr);
+	int (*close_r)(struct _reent *r,int fd);
+	int (*open_r)(struct _reent *r,const char *file,int flags,int mode);
+	_ssize_t (*read_r)(struct _reent *r,int fd,void *ptr,size_t len);
+	_ssize_t (*write_r)(struct _reent *r,int fd,const void *ptr,size_t len);
+	_off_t (*lseek_r)(struct _reent *r,int fd,_off_t pos,int dir);
+	_off64_t (*lseek64_r)(struct _reent *r,int fd,_off64_t pos,int dir);
+	int (*fstat_r)(struct _reent *r,int fd,struct stat *st);
+	int (*fstat64_r)(struct _reent *r,int fd,struct stat *st);
+	int (*stat_r)(struct _reent *r,const char *path,struct stat *st);
+	int (*stat64_r)(struct _reent *r,const char *path,struct stat *st);
+	int (*ftruncate_r)(struct _reent *r,int fd,off_t len);
+	int (*truncate_r)(struct _reent *r,const char *path,off_t len);
+	int (*fsync_r)(struct _reent *r,int fd);
+	int (*link_r)(struct _reent *r,const char *old,const char *new);
+	int (*unlink_r)(struct _reent *r,const char *name);
+	int (*chmod_r)(struct _reent *r,const char *path,mode_t mode);
+	int (*rename_r)(struct _reent *r,const char *old,const char *new);
+	int (*utime_r)(struct _reent *r,const char *path,const struct utimbuf *times);
+
+	mode_t (*umask_r)(struct _reent *r,mode_t cmask);
+
+	int (*mkdir_r)(struct _reent *r,const char *path,mode_t mode);
+	int (*rmdir_r)(struct _reent *r,const char *dirname);
+	int (*chdir_r)(struct _reent *r,const char *dirname);
+	char* (*getcwd_r)(struct _reent *r,char *buf,size_t size);
+
+	int (*closedir_r)(struct _reent *r,DIR *dirp);
+	DIR* (*opendir_r)(struct _reent *r,const char *dirname);
+	struct dirent* (*readdir_r)(struct _reent *r,DIR *dirp);
+	int (*readdir_r_r)(struct _reent *r,DIR *dirp,struct dirent *entry,struct dirent **result);
+	void (*rewinddir_r)(struct _reent *r,DIR *dirp);
+	void (*seekdir_r)(struct _reent *r,DIR *dirp,long int loc);
+	long int (*telldir_r)(struct _reent *r,DIR *dirp);
+
+	int (*getpid_r)(struct _reent *r);
+	int (*isatty_r)(struct _reent *r,int fd);
+	int (*execve_r)(struct _reent *r,char *name,char **argv,char **env);
+	int (*gettod_r)(struct _reent *r,struct timeval *ptimeval,void *ptimezone);
+	int (*settod_r)(struct _reent *r,const struct timeval *ptimeval,const struct timezone *ptimezone);
+	int (*usleep_r)(struct _reent *r,useconds_t usec);
+	int (*getrusage_r)(struct _reent *r,int who,struct rusage *r_usage);
+	unsigned int (*sleep_r)(struct _reent *r,unsigned int sec);
+	clock_t (*times_r)(struct _reent *r,struct tms *buf);
+
+	int (*sys_lwmutex_create_r)(struct _reent *r,sys_lwmutex_t *lwmutex,const sys_lwmutex_attr_t *attr);
+	int (*sys_lwmutex_destroy_r)(struct _reent *r,sys_lwmutex_t *lwmutex);
+	int (*sys_lwmutex_lock_r)(struct _reent *r,sys_lwmutex_t *lwmutex,unsigned long long timeout);
+	int (*sys_lwmutex_trylock_r)(struct _reent *r,sys_lwmutex_t *lwmutex);
+	int (*sys_lwmutex_unlock_r)(struct _reent *r,sys_lwmutex_t *lwmutex);
+
+	void (*exit)(int rc);
+};
+
+extern struct __syscalls_t __syscalls;
+
+#endif
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libc/sys/lv2/sys/utime.h newlib-ps3/newlib/libc/sys/lv2/sys/utime.h
--- newlib-4.4.0.20231231/newlib/libc/sys/lv2/sys/utime.h	1970-01-01 01:00:00
+++ newlib-ps3/newlib/libc/sys/lv2/sys/utime.h	2024-04-13 18:36:31
@@ -0,0 +1,20 @@
+#ifndef _SYS_UTIME_H
+#define _SYS_UTIME_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct utimbuf
+{
+	time_t actime;
+	time_t modtime;
+};
+
+int utime(const char *path, const struct utimbuf *times);
+
+#ifdef __cplusplus
+};
+#endif
+
+#endif /* _SYS_UTIME_H */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/fe_dfl_env.c newlib-ps3/newlib/libm/machine/spu/fe_dfl_env.c
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/fe_dfl_env.c	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/fe_dfl_env.c	2022-02-13 10:32:29
@@ -2,4 +2,4 @@
 /*
  * Define for FE_DFL_ENV macro, all bits zero.
  */
-const fenv_t __fe_dfl_env = { 0 };
+fenv_t __fe_dfl_env = { 0 };
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/feclearexcept.c newlib-ps3/newlib/libm/machine/spu/feclearexcept.c
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/feclearexcept.c	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/feclearexcept.c	2022-02-13 10:15:30
@@ -1,6 +1,6 @@
 #include "headers/feclearexcept.h"
 
-void feclearexcept(int excepts)
+int feclearexcept(int excepts)
 {
-    _feclearexcept(excepts);
+    return _feclearexcept(excepts);
 }
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/fegetenv.c newlib-ps3/newlib/libm/machine/spu/fegetenv.c
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/fegetenv.c	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/fegetenv.c	2022-02-13 10:18:32
@@ -1,6 +1,6 @@
 #include "headers/fegetenv.h"
 
-void fegetenv(fenv_t *envp)
+int fegetenv(fenv_t *envp)
 {
-    _fegetenv(envp);
+    return _fegetenv(envp);
 }
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/fegetexceptflag.c newlib-ps3/newlib/libm/machine/spu/fegetexceptflag.c
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/fegetexceptflag.c	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/fegetexceptflag.c	2022-02-13 10:15:02
@@ -1,6 +1,6 @@
 #include "headers/fegetexceptflag.h"
 
-void fegetexceptflag(fexcept_t *flagp, int excepts)
+int fegetexceptflag(fexcept_t *flagp, int excepts)
 {
-    _fegetexceptflag(flagp, excepts);
+    return _fegetexceptflag(flagp, excepts);
 }
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/feraiseexcept.c newlib-ps3/newlib/libm/machine/spu/feraiseexcept.c
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/feraiseexcept.c	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/feraiseexcept.c	2022-02-13 10:16:50
@@ -1,6 +1,6 @@
 #include "headers/feraiseexcept.h"
 
-void feraiseexcept(int excepts)
+int feraiseexcept(int excepts)
 {
-    _feraiseexcept(excepts);
+    return _feraiseexcept(excepts);
 }
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/fesetenv.c newlib-ps3/newlib/libm/machine/spu/fesetenv.c
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/fesetenv.c	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/fesetenv.c	2022-02-13 10:19:12
@@ -1,6 +1,6 @@
 #include "headers/fesetenv.h"
 
-void fesetenv(const fenv_t *envp)
+int fesetenv(const fenv_t *envp)
 {
-    _fesetenv(envp);
+    return _fesetenv(envp);
 }
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/fesetexceptflag.c newlib-ps3/newlib/libm/machine/spu/fesetexceptflag.c
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/fesetexceptflag.c	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/fesetexceptflag.c	2022-02-13 10:17:53
@@ -1,6 +1,6 @@
 #include "headers/fesetexceptflag.h"
 
-void fesetexceptflag(const fexcept_t *flagp, int excepts)
+int fesetexceptflag(const fexcept_t *flagp, int excepts)
 {
-    _fesetexceptflag(flagp, excepts);
+    return _fesetexceptflag(flagp, excepts);
 }
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/feupdateenv.c newlib-ps3/newlib/libm/machine/spu/feupdateenv.c
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/feupdateenv.c	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/feupdateenv.c	2022-02-13 10:20:08
@@ -1,6 +1,6 @@
 #include "headers/feupdateenv.h"
 
-void feupdateenv(const fenv_t *envp)
+int feupdateenv(const fenv_t *envp)
 {
-    _feupdateenv(envp);
+    return _feupdateenv(envp);
 }
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/feclearexcept.h newlib-ps3/newlib/libm/machine/spu/headers/feclearexcept.h
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/feclearexcept.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/headers/feclearexcept.h	2024-04-14 17:16:37
@@ -37,7 +37,7 @@
 #include <fenv.h>
 #include "headers/fefpscr.h"
 
-static __inline void _feclearexcept(int excepts)
+static __inline int _feclearexcept(int excepts)
 {
   vec_uint4 fpscr, fpscr_mask;
 
@@ -46,6 +46,7 @@ static __inline void _feclearexcept(int excepts)
   fpscr_mask = __unpack_fpscr((fenv_t) excepts);
   fpscr = spu_and(fpscr, fpscr_mask);
   spu_mtfpscr(fpscr);
+  return (0);
 }
 
 #endif /* _FECLEAREXCEPT_H_ */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/fegetenv.h newlib-ps3/newlib/libm/machine/spu/headers/fegetenv.h
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/fegetenv.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/headers/fegetenv.h	2024-04-14 17:16:37
@@ -37,12 +37,13 @@
 #include <fenv.h>
 #include "headers/fefpscr.h"
 
-static __inline void _fegetenv(fenv_t *envp)
+static __inline int _fegetenv(fenv_t *envp)
 {
   vec_uint4 fpscr;
 
   fpscr = spu_mffpscr();
   *envp = __pack_fpscr(fpscr);
+  return (0);
 }
 
 #endif /* _FEGETENV_H_ */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/fegetexceptflag.h newlib-ps3/newlib/libm/machine/spu/headers/fegetexceptflag.h
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/fegetexceptflag.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/headers/fegetexceptflag.h	2024-04-14 17:16:37
@@ -37,13 +37,14 @@
 #include <fenv.h>
 #include "headers/fefpscr.h"
 
-static __inline void _fegetexceptflag(fexcept_t *flagp, int excepts)
+static __inline int _fegetexceptflag(fexcept_t *flagp, int excepts)
 {
   vec_uint4 fpscr;
 
   excepts &= FE_ALL_EXCEPT;
   fpscr = spu_mffpscr();
   *flagp = __pack_fpscr(fpscr) & excepts;
+  return (0);
 }
 
 #endif /* _FEGETEXCEPTFLAG_H_ */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/feraiseexcept.h newlib-ps3/newlib/libm/machine/spu/headers/feraiseexcept.h
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/feraiseexcept.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/headers/feraiseexcept.h	2024-04-14 17:16:37
@@ -37,7 +37,7 @@
 #include <fenv.h>
 #include "headers/fefpscr.h"
 
-static __inline void _feraiseexcept(int excepts)
+static __inline int _feraiseexcept(int excepts)
 {
   vec_uint4 fpscr, big_except;
 
@@ -46,6 +46,7 @@ static __inline void _feraiseexcept(int excepts)
   big_except = __unpack_fpscr(excepts);
   fpscr = spu_or(fpscr, big_except);
   spu_mtfpscr(fpscr);
+  return (0);
 }
 
 #endif /* _FERAISEEXCEPT_H_ */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/fesetenv.h newlib-ps3/newlib/libm/machine/spu/headers/fesetenv.h
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/fesetenv.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/headers/fesetenv.h	2024-04-14 17:16:37
@@ -37,12 +37,13 @@
 #include <fenv.h>
 #include "headers/fefpscr.h"
 
-static __inline void _fesetenv(const fenv_t *envp)
+static __inline int _fesetenv(const fenv_t *envp)
 {
   vec_uint4 fpscr;
 
   fpscr = __unpack_fpscr(*envp);
   spu_mtfpscr(fpscr);
+  return (0);
 }
 
 #endif /* _FESETENV_H_ */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/fesetexceptflag.h newlib-ps3/newlib/libm/machine/spu/headers/fesetexceptflag.h
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/fesetexceptflag.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/headers/fesetexceptflag.h	2024-04-14 17:16:37
@@ -37,7 +37,7 @@
 #include <fenv.h>
 #include "headers/fefpscr.h"
 
-static __inline void _fesetexceptflag(const fexcept_t *flagp, int excepts)
+static __inline int _fesetexceptflag(const fexcept_t *flagp, int excepts)
 {
   vec_uint4 fpscr;
   fenv_t mask, pack_fpscr;
@@ -47,6 +47,7 @@ static __inline void _fesetexceptflag(const fexcept_t 
   mask = excepts & FE_ALL_EXCEPT;
   fpscr = __unpack_fpscr((pack_fpscr & ~mask) | (*flagp & mask));
   spu_mtfpscr(fpscr);
+  return (0);
 }
 
 #endif /* _FESETEXCEPTFLAG_H_ */
diff -urpPN -x .git newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/feupdateenv.h newlib-ps3/newlib/libm/machine/spu/headers/feupdateenv.h
--- newlib-4.4.0.20231231/newlib/libm/machine/spu/headers/feupdateenv.h	2023-12-31 18:00:18
+++ newlib-ps3/newlib/libm/machine/spu/headers/feupdateenv.h	2024-04-14 17:16:37
@@ -37,12 +37,13 @@
 #include <fenv.h>
 #include "headers/fefpscr.h"
 
-static __inline void _feupdateenv(const fenv_t *envp)
+static __inline int _feupdateenv(const fenv_t *envp)
 {
   vec_uint4 fpscr;
 
   fpscr = __unpack_fpscr(*envp);
   spu_mtfpscr(fpscr);
+  return (0);
 }
 
 #endif /* _FEUPDATEENV_H_ */
